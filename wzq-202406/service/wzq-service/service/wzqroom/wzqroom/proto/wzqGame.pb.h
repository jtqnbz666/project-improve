// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: wzqGame.proto

#ifndef PROTOBUF_wzqGame_2eproto__INCLUDED
#define PROTOBUF_wzqGame_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "wzqProtocol.pb.h"
// @@protoc_insertion_point(includes)

namespace wzq {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_wzqGame_2eproto();
void protobuf_AssignDesc_wzqGame_2eproto();
void protobuf_ShutdownFile_wzqGame_2eproto();

class REQCreateTable;
class ACKCreateTable;
class REQJoinTable;
class ACKJoinTable;
class UpdateTableStatus;
class PlayerStatus;
class REQReadyGame;
class ACKReadyGame;
class REQStartMatch;
class REQStartGame;
class ACKStartGame;
class ACKStartMatch;
class NotifyCreateTable;
class NotifyStartGame;
class REQDownChess;
class ACKDownChess;
class REQMatch;
class ACKMatch;
class NotifyCancelMatch;
class WinPosition;
class WinPosition_Row;
class GameOver;
class NotifyLocalGameStart;
class REQRegretChess;
class ACKRegretChess;
class REQAgreeRegretChess;
class ACKAgreeRegretChess;
class REQDisAgreeRegretChess;
class ACKDisAgreeRegretChess;
class NotifyGiveUp;
class NotifyPeaceChess;
class NotifyASKPeaceChess;
class NotifyAgreePeaceChess;
class NotifyDisagreePeaceChess;
class ACKAgreePeaceChess;
class ACKDisagreePeaceChess;
class ChessMove;
class PlayingResult;

enum GameState {
  GS_UNKNOWN = 0,
  GS_DRAW = 1,
  GS_WIN = 2,
  GS_LOSE = 3,
  GS_READY = 4,
  GS_UNREADY = 5,
  GS_PLAYING = 6
};
bool GameState_IsValid(int value);
const GameState GameState_MIN = GS_UNKNOWN;
const GameState GameState_MAX = GS_PLAYING;
const int GameState_ARRAYSIZE = GameState_MAX + 1;

const ::google::protobuf::EnumDescriptor* GameState_descriptor();
inline const ::std::string& GameState_Name(GameState value) {
  return ::google::protobuf::internal::NameOfEnum(
    GameState_descriptor(), value);
}
inline bool GameState_Parse(
    const ::std::string& name, GameState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GameState>(
    GameState_descriptor(), name, value);
}
enum ChessColorType {
  Chess_UnKnown = 0,
  Chess_White = 1,
  Chess_Black = 2
};
bool ChessColorType_IsValid(int value);
const ChessColorType ChessColorType_MIN = Chess_UnKnown;
const ChessColorType ChessColorType_MAX = Chess_Black;
const int ChessColorType_ARRAYSIZE = ChessColorType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ChessColorType_descriptor();
inline const ::std::string& ChessColorType_Name(ChessColorType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ChessColorType_descriptor(), value);
}
inline bool ChessColorType_Parse(
    const ::std::string& name, ChessColorType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ChessColorType>(
    ChessColorType_descriptor(), name, value);
}
enum RoomType {
  RT_PRIMARY = 1,
  RT_INTERMEDIATE = 2,
  RT_PREMIUM = 3
};
bool RoomType_IsValid(int value);
const RoomType RoomType_MIN = RT_PRIMARY;
const RoomType RoomType_MAX = RT_PREMIUM;
const int RoomType_ARRAYSIZE = RoomType_MAX + 1;

const ::google::protobuf::EnumDescriptor* RoomType_descriptor();
inline const ::std::string& RoomType_Name(RoomType value) {
  return ::google::protobuf::internal::NameOfEnum(
    RoomType_descriptor(), value);
}
inline bool RoomType_Parse(
    const ::std::string& name, RoomType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RoomType>(
    RoomType_descriptor(), name, value);
}
// ===================================================================

class REQCreateTable : public ::google::protobuf::Message {
 public:
  REQCreateTable();
  virtual ~REQCreateTable();

  REQCreateTable(const REQCreateTable& from);

  inline REQCreateTable& operator=(const REQCreateTable& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const REQCreateTable& default_instance();

  void Swap(REQCreateTable* other);

  // implements Message ----------------------------------------------

  REQCreateTable* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const REQCreateTable& from);
  void MergeFrom(const REQCreateTable& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 userID = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUserIDFieldNumber = 1;
  inline ::google::protobuf::int64 userid() const;
  inline void set_userid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:wzq.REQCreateTable)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 userid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_wzqGame_2eproto();
  friend void protobuf_AssignDesc_wzqGame_2eproto();
  friend void protobuf_ShutdownFile_wzqGame_2eproto();

  void InitAsDefaultInstance();
  static REQCreateTable* default_instance_;
};
// -------------------------------------------------------------------

class ACKCreateTable : public ::google::protobuf::Message {
 public:
  ACKCreateTable();
  virtual ~ACKCreateTable();

  ACKCreateTable(const ACKCreateTable& from);

  inline ACKCreateTable& operator=(const ACKCreateTable& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ACKCreateTable& default_instance();

  void Swap(ACKCreateTable* other);

  // implements Message ----------------------------------------------

  ACKCreateTable* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ACKCreateTable& from);
  void MergeFrom(const ACKCreateTable& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 resultCode = 1;
  inline bool has_resultcode() const;
  inline void clear_resultcode();
  static const int kResultCodeFieldNumber = 1;
  inline ::google::protobuf::int32 resultcode() const;
  inline void set_resultcode(::google::protobuf::int32 value);

  // optional string tableID = 2;
  inline bool has_tableid() const;
  inline void clear_tableid();
  static const int kTableIDFieldNumber = 2;
  inline const ::std::string& tableid() const;
  inline void set_tableid(const ::std::string& value);
  inline void set_tableid(const char* value);
  inline void set_tableid(const char* value, size_t size);
  inline ::std::string* mutable_tableid();
  inline ::std::string* release_tableid();
  inline void set_allocated_tableid(::std::string* tableid);

  // @@protoc_insertion_point(class_scope:wzq.ACKCreateTable)
 private:
  inline void set_has_resultcode();
  inline void clear_has_resultcode();
  inline void set_has_tableid();
  inline void clear_has_tableid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* tableid_;
  ::google::protobuf::int32 resultcode_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_wzqGame_2eproto();
  friend void protobuf_AssignDesc_wzqGame_2eproto();
  friend void protobuf_ShutdownFile_wzqGame_2eproto();

  void InitAsDefaultInstance();
  static ACKCreateTable* default_instance_;
};
// -------------------------------------------------------------------

class REQJoinTable : public ::google::protobuf::Message {
 public:
  REQJoinTable();
  virtual ~REQJoinTable();

  REQJoinTable(const REQJoinTable& from);

  inline REQJoinTable& operator=(const REQJoinTable& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const REQJoinTable& default_instance();

  void Swap(REQJoinTable* other);

  // implements Message ----------------------------------------------

  REQJoinTable* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const REQJoinTable& from);
  void MergeFrom(const REQJoinTable& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 userID = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUserIDFieldNumber = 1;
  inline ::google::protobuf::int64 userid() const;
  inline void set_userid(::google::protobuf::int64 value);

  // optional string tableID = 2;
  inline bool has_tableid() const;
  inline void clear_tableid();
  static const int kTableIDFieldNumber = 2;
  inline const ::std::string& tableid() const;
  inline void set_tableid(const ::std::string& value);
  inline void set_tableid(const char* value);
  inline void set_tableid(const char* value, size_t size);
  inline ::std::string* mutable_tableid();
  inline ::std::string* release_tableid();
  inline void set_allocated_tableid(::std::string* tableid);

  // @@protoc_insertion_point(class_scope:wzq.REQJoinTable)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_tableid();
  inline void clear_has_tableid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 userid_;
  ::std::string* tableid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_wzqGame_2eproto();
  friend void protobuf_AssignDesc_wzqGame_2eproto();
  friend void protobuf_ShutdownFile_wzqGame_2eproto();

  void InitAsDefaultInstance();
  static REQJoinTable* default_instance_;
};
// -------------------------------------------------------------------

class ACKJoinTable : public ::google::protobuf::Message {
 public:
  ACKJoinTable();
  virtual ~ACKJoinTable();

  ACKJoinTable(const ACKJoinTable& from);

  inline ACKJoinTable& operator=(const ACKJoinTable& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ACKJoinTable& default_instance();

  void Swap(ACKJoinTable* other);

  // implements Message ----------------------------------------------

  ACKJoinTable* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ACKJoinTable& from);
  void MergeFrom(const ACKJoinTable& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 resultCode = 1;
  inline bool has_resultcode() const;
  inline void clear_resultcode();
  static const int kResultCodeFieldNumber = 1;
  inline ::google::protobuf::int32 resultcode() const;
  inline void set_resultcode(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:wzq.ACKJoinTable)
 private:
  inline void set_has_resultcode();
  inline void clear_has_resultcode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 resultcode_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_wzqGame_2eproto();
  friend void protobuf_AssignDesc_wzqGame_2eproto();
  friend void protobuf_ShutdownFile_wzqGame_2eproto();

  void InitAsDefaultInstance();
  static ACKJoinTable* default_instance_;
};
// -------------------------------------------------------------------

class UpdateTableStatus : public ::google::protobuf::Message {
 public:
  UpdateTableStatus();
  virtual ~UpdateTableStatus();

  UpdateTableStatus(const UpdateTableStatus& from);

  inline UpdateTableStatus& operator=(const UpdateTableStatus& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateTableStatus& default_instance();

  void Swap(UpdateTableStatus* other);

  // implements Message ----------------------------------------------

  UpdateTableStatus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UpdateTableStatus& from);
  void MergeFrom(const UpdateTableStatus& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string tableID = 1;
  inline bool has_tableid() const;
  inline void clear_tableid();
  static const int kTableIDFieldNumber = 1;
  inline const ::std::string& tableid() const;
  inline void set_tableid(const ::std::string& value);
  inline void set_tableid(const char* value);
  inline void set_tableid(const char* value, size_t size);
  inline ::std::string* mutable_tableid();
  inline ::std::string* release_tableid();
  inline void set_allocated_tableid(::std::string* tableid);

  // repeated .wzq.PlayerStatus players = 2;
  inline int players_size() const;
  inline void clear_players();
  static const int kPlayersFieldNumber = 2;
  inline const ::wzq::PlayerStatus& players(int index) const;
  inline ::wzq::PlayerStatus* mutable_players(int index);
  inline ::wzq::PlayerStatus* add_players();
  inline const ::google::protobuf::RepeatedPtrField< ::wzq::PlayerStatus >&
      players() const;
  inline ::google::protobuf::RepeatedPtrField< ::wzq::PlayerStatus >*
      mutable_players();

  // @@protoc_insertion_point(class_scope:wzq.UpdateTableStatus)
 private:
  inline void set_has_tableid();
  inline void clear_has_tableid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* tableid_;
  ::google::protobuf::RepeatedPtrField< ::wzq::PlayerStatus > players_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_wzqGame_2eproto();
  friend void protobuf_AssignDesc_wzqGame_2eproto();
  friend void protobuf_ShutdownFile_wzqGame_2eproto();

  void InitAsDefaultInstance();
  static UpdateTableStatus* default_instance_;
};
// -------------------------------------------------------------------

class PlayerStatus : public ::google::protobuf::Message {
 public:
  PlayerStatus();
  virtual ~PlayerStatus();

  PlayerStatus(const PlayerStatus& from);

  inline PlayerStatus& operator=(const PlayerStatus& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerStatus& default_instance();

  void Swap(PlayerStatus* other);

  // implements Message ----------------------------------------------

  PlayerStatus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayerStatus& from);
  void MergeFrom(const PlayerStatus& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .UserRawData baseInfo = 1;
  inline bool has_baseinfo() const;
  inline void clear_baseinfo();
  static const int kBaseInfoFieldNumber = 1;
  inline const ::UserRawData& baseinfo() const;
  inline ::UserRawData* mutable_baseinfo();
  inline ::UserRawData* release_baseinfo();
  inline void set_allocated_baseinfo(::UserRawData* baseinfo);

  // optional .wzq.GameState state = 2;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 2;
  inline ::wzq::GameState state() const;
  inline void set_state(::wzq::GameState value);

  // optional .wzq.ChessColorType color = 3;
  inline bool has_color() const;
  inline void clear_color();
  static const int kColorFieldNumber = 3;
  inline ::wzq::ChessColorType color() const;
  inline void set_color(::wzq::ChessColorType value);

  // @@protoc_insertion_point(class_scope:wzq.PlayerStatus)
 private:
  inline void set_has_baseinfo();
  inline void clear_has_baseinfo();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_color();
  inline void clear_has_color();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::UserRawData* baseinfo_;
  int state_;
  int color_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_wzqGame_2eproto();
  friend void protobuf_AssignDesc_wzqGame_2eproto();
  friend void protobuf_ShutdownFile_wzqGame_2eproto();

  void InitAsDefaultInstance();
  static PlayerStatus* default_instance_;
};
// -------------------------------------------------------------------

class REQReadyGame : public ::google::protobuf::Message {
 public:
  REQReadyGame();
  virtual ~REQReadyGame();

  REQReadyGame(const REQReadyGame& from);

  inline REQReadyGame& operator=(const REQReadyGame& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const REQReadyGame& default_instance();

  void Swap(REQReadyGame* other);

  // implements Message ----------------------------------------------

  REQReadyGame* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const REQReadyGame& from);
  void MergeFrom(const REQReadyGame& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:wzq.REQReadyGame)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_wzqGame_2eproto();
  friend void protobuf_AssignDesc_wzqGame_2eproto();
  friend void protobuf_ShutdownFile_wzqGame_2eproto();

  void InitAsDefaultInstance();
  static REQReadyGame* default_instance_;
};
// -------------------------------------------------------------------

class ACKReadyGame : public ::google::protobuf::Message {
 public:
  ACKReadyGame();
  virtual ~ACKReadyGame();

  ACKReadyGame(const ACKReadyGame& from);

  inline ACKReadyGame& operator=(const ACKReadyGame& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ACKReadyGame& default_instance();

  void Swap(ACKReadyGame* other);

  // implements Message ----------------------------------------------

  ACKReadyGame* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ACKReadyGame& from);
  void MergeFrom(const ACKReadyGame& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 resultCode = 1;
  inline bool has_resultcode() const;
  inline void clear_resultcode();
  static const int kResultCodeFieldNumber = 1;
  inline ::google::protobuf::int32 resultcode() const;
  inline void set_resultcode(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:wzq.ACKReadyGame)
 private:
  inline void set_has_resultcode();
  inline void clear_has_resultcode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 resultcode_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_wzqGame_2eproto();
  friend void protobuf_AssignDesc_wzqGame_2eproto();
  friend void protobuf_ShutdownFile_wzqGame_2eproto();

  void InitAsDefaultInstance();
  static ACKReadyGame* default_instance_;
};
// -------------------------------------------------------------------

class REQStartMatch : public ::google::protobuf::Message {
 public:
  REQStartMatch();
  virtual ~REQStartMatch();

  REQStartMatch(const REQStartMatch& from);

  inline REQStartMatch& operator=(const REQStartMatch& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const REQStartMatch& default_instance();

  void Swap(REQStartMatch* other);

  // implements Message ----------------------------------------------

  REQStartMatch* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const REQStartMatch& from);
  void MergeFrom(const REQStartMatch& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 userID = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUserIDFieldNumber = 1;
  inline ::google::protobuf::int64 userid() const;
  inline void set_userid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:wzq.REQStartMatch)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 userid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_wzqGame_2eproto();
  friend void protobuf_AssignDesc_wzqGame_2eproto();
  friend void protobuf_ShutdownFile_wzqGame_2eproto();

  void InitAsDefaultInstance();
  static REQStartMatch* default_instance_;
};
// -------------------------------------------------------------------

class REQStartGame : public ::google::protobuf::Message {
 public:
  REQStartGame();
  virtual ~REQStartGame();

  REQStartGame(const REQStartGame& from);

  inline REQStartGame& operator=(const REQStartGame& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const REQStartGame& default_instance();

  void Swap(REQStartGame* other);

  // implements Message ----------------------------------------------

  REQStartGame* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const REQStartGame& from);
  void MergeFrom(const REQStartGame& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 userID = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUserIDFieldNumber = 1;
  inline ::google::protobuf::int64 userid() const;
  inline void set_userid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:wzq.REQStartGame)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 userid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_wzqGame_2eproto();
  friend void protobuf_AssignDesc_wzqGame_2eproto();
  friend void protobuf_ShutdownFile_wzqGame_2eproto();

  void InitAsDefaultInstance();
  static REQStartGame* default_instance_;
};
// -------------------------------------------------------------------

class ACKStartGame : public ::google::protobuf::Message {
 public:
  ACKStartGame();
  virtual ~ACKStartGame();

  ACKStartGame(const ACKStartGame& from);

  inline ACKStartGame& operator=(const ACKStartGame& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ACKStartGame& default_instance();

  void Swap(ACKStartGame* other);

  // implements Message ----------------------------------------------

  ACKStartGame* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ACKStartGame& from);
  void MergeFrom(const ACKStartGame& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 resultCode = 1;
  inline bool has_resultcode() const;
  inline void clear_resultcode();
  static const int kResultCodeFieldNumber = 1;
  inline ::google::protobuf::int32 resultcode() const;
  inline void set_resultcode(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:wzq.ACKStartGame)
 private:
  inline void set_has_resultcode();
  inline void clear_has_resultcode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 resultcode_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_wzqGame_2eproto();
  friend void protobuf_AssignDesc_wzqGame_2eproto();
  friend void protobuf_ShutdownFile_wzqGame_2eproto();

  void InitAsDefaultInstance();
  static ACKStartGame* default_instance_;
};
// -------------------------------------------------------------------

class ACKStartMatch : public ::google::protobuf::Message {
 public:
  ACKStartMatch();
  virtual ~ACKStartMatch();

  ACKStartMatch(const ACKStartMatch& from);

  inline ACKStartMatch& operator=(const ACKStartMatch& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ACKStartMatch& default_instance();

  void Swap(ACKStartMatch* other);

  // implements Message ----------------------------------------------

  ACKStartMatch* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ACKStartMatch& from);
  void MergeFrom(const ACKStartMatch& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 resultCode = 1;
  inline bool has_resultcode() const;
  inline void clear_resultcode();
  static const int kResultCodeFieldNumber = 1;
  inline ::google::protobuf::int32 resultcode() const;
  inline void set_resultcode(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:wzq.ACKStartMatch)
 private:
  inline void set_has_resultcode();
  inline void clear_has_resultcode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 resultcode_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_wzqGame_2eproto();
  friend void protobuf_AssignDesc_wzqGame_2eproto();
  friend void protobuf_ShutdownFile_wzqGame_2eproto();

  void InitAsDefaultInstance();
  static ACKStartMatch* default_instance_;
};
// -------------------------------------------------------------------

class NotifyCreateTable : public ::google::protobuf::Message {
 public:
  NotifyCreateTable();
  virtual ~NotifyCreateTable();

  NotifyCreateTable(const NotifyCreateTable& from);

  inline NotifyCreateTable& operator=(const NotifyCreateTable& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NotifyCreateTable& default_instance();

  void Swap(NotifyCreateTable* other);

  // implements Message ----------------------------------------------

  NotifyCreateTable* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NotifyCreateTable& from);
  void MergeFrom(const NotifyCreateTable& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int64 players = 1;
  inline int players_size() const;
  inline void clear_players();
  static const int kPlayersFieldNumber = 1;
  inline ::google::protobuf::int64 players(int index) const;
  inline void set_players(int index, ::google::protobuf::int64 value);
  inline void add_players(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      players() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_players();

  // @@protoc_insertion_point(class_scope:wzq.NotifyCreateTable)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > players_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_wzqGame_2eproto();
  friend void protobuf_AssignDesc_wzqGame_2eproto();
  friend void protobuf_ShutdownFile_wzqGame_2eproto();

  void InitAsDefaultInstance();
  static NotifyCreateTable* default_instance_;
};
// -------------------------------------------------------------------

class NotifyStartGame : public ::google::protobuf::Message {
 public:
  NotifyStartGame();
  virtual ~NotifyStartGame();

  NotifyStartGame(const NotifyStartGame& from);

  inline NotifyStartGame& operator=(const NotifyStartGame& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NotifyStartGame& default_instance();

  void Swap(NotifyStartGame* other);

  // implements Message ----------------------------------------------

  NotifyStartGame* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NotifyStartGame& from);
  void MergeFrom(const NotifyStartGame& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 userId1 = 1;
  inline bool has_userid1() const;
  inline void clear_userid1();
  static const int kUserId1FieldNumber = 1;
  inline ::google::protobuf::int64 userid1() const;
  inline void set_userid1(::google::protobuf::int64 value);

  // required int64 userId2 = 2;
  inline bool has_userid2() const;
  inline void clear_userid2();
  static const int kUserId2FieldNumber = 2;
  inline ::google::protobuf::int64 userid2() const;
  inline void set_userid2(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:wzq.NotifyStartGame)
 private:
  inline void set_has_userid1();
  inline void clear_has_userid1();
  inline void set_has_userid2();
  inline void clear_has_userid2();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 userid1_;
  ::google::protobuf::int64 userid2_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_wzqGame_2eproto();
  friend void protobuf_AssignDesc_wzqGame_2eproto();
  friend void protobuf_ShutdownFile_wzqGame_2eproto();

  void InitAsDefaultInstance();
  static NotifyStartGame* default_instance_;
};
// -------------------------------------------------------------------

class REQDownChess : public ::google::protobuf::Message {
 public:
  REQDownChess();
  virtual ~REQDownChess();

  REQDownChess(const REQDownChess& from);

  inline REQDownChess& operator=(const REQDownChess& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const REQDownChess& default_instance();

  void Swap(REQDownChess* other);

  // implements Message ----------------------------------------------

  REQDownChess* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const REQDownChess& from);
  void MergeFrom(const REQDownChess& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::int64 user_id() const;
  inline void set_user_id(::google::protobuf::int64 value);

  // optional int32 posX = 2;
  inline bool has_posx() const;
  inline void clear_posx();
  static const int kPosXFieldNumber = 2;
  inline ::google::protobuf::int32 posx() const;
  inline void set_posx(::google::protobuf::int32 value);

  // optional int32 posY = 3;
  inline bool has_posy() const;
  inline void clear_posy();
  static const int kPosYFieldNumber = 3;
  inline ::google::protobuf::int32 posy() const;
  inline void set_posy(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:wzq.REQDownChess)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_posx();
  inline void clear_has_posx();
  inline void set_has_posy();
  inline void clear_has_posy();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 user_id_;
  ::google::protobuf::int32 posx_;
  ::google::protobuf::int32 posy_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_wzqGame_2eproto();
  friend void protobuf_AssignDesc_wzqGame_2eproto();
  friend void protobuf_ShutdownFile_wzqGame_2eproto();

  void InitAsDefaultInstance();
  static REQDownChess* default_instance_;
};
// -------------------------------------------------------------------

class ACKDownChess : public ::google::protobuf::Message {
 public:
  ACKDownChess();
  virtual ~ACKDownChess();

  ACKDownChess(const ACKDownChess& from);

  inline ACKDownChess& operator=(const ACKDownChess& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ACKDownChess& default_instance();

  void Swap(ACKDownChess* other);

  // implements Message ----------------------------------------------

  ACKDownChess* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ACKDownChess& from);
  void MergeFrom(const ACKDownChess& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 posX = 1;
  inline bool has_posx() const;
  inline void clear_posx();
  static const int kPosXFieldNumber = 1;
  inline ::google::protobuf::int32 posx() const;
  inline void set_posx(::google::protobuf::int32 value);

  // optional int32 posY = 2;
  inline bool has_posy() const;
  inline void clear_posy();
  static const int kPosYFieldNumber = 2;
  inline ::google::protobuf::int32 posy() const;
  inline void set_posy(::google::protobuf::int32 value);

  // optional .wzq.ChessColorType color = 3;
  inline bool has_color() const;
  inline void clear_color();
  static const int kColorFieldNumber = 3;
  inline ::wzq::ChessColorType color() const;
  inline void set_color(::wzq::ChessColorType value);

  // @@protoc_insertion_point(class_scope:wzq.ACKDownChess)
 private:
  inline void set_has_posx();
  inline void clear_has_posx();
  inline void set_has_posy();
  inline void clear_has_posy();
  inline void set_has_color();
  inline void clear_has_color();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 posx_;
  ::google::protobuf::int32 posy_;
  int color_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_wzqGame_2eproto();
  friend void protobuf_AssignDesc_wzqGame_2eproto();
  friend void protobuf_ShutdownFile_wzqGame_2eproto();

  void InitAsDefaultInstance();
  static ACKDownChess* default_instance_;
};
// -------------------------------------------------------------------

class REQMatch : public ::google::protobuf::Message {
 public:
  REQMatch();
  virtual ~REQMatch();

  REQMatch(const REQMatch& from);

  inline REQMatch& operator=(const REQMatch& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const REQMatch& default_instance();

  void Swap(REQMatch* other);

  // implements Message ----------------------------------------------

  REQMatch* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const REQMatch& from);
  void MergeFrom(const REQMatch& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 userID = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUserIDFieldNumber = 1;
  inline ::google::protobuf::int64 userid() const;
  inline void set_userid(::google::protobuf::int64 value);

  // required int32 roomType = 2;
  inline bool has_roomtype() const;
  inline void clear_roomtype();
  static const int kRoomTypeFieldNumber = 2;
  inline ::google::protobuf::int32 roomtype() const;
  inline void set_roomtype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:wzq.REQMatch)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_roomtype();
  inline void clear_has_roomtype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 userid_;
  ::google::protobuf::int32 roomtype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_wzqGame_2eproto();
  friend void protobuf_AssignDesc_wzqGame_2eproto();
  friend void protobuf_ShutdownFile_wzqGame_2eproto();

  void InitAsDefaultInstance();
  static REQMatch* default_instance_;
};
// -------------------------------------------------------------------

class ACKMatch : public ::google::protobuf::Message {
 public:
  ACKMatch();
  virtual ~ACKMatch();

  ACKMatch(const ACKMatch& from);

  inline ACKMatch& operator=(const ACKMatch& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ACKMatch& default_instance();

  void Swap(ACKMatch* other);

  // implements Message ----------------------------------------------

  ACKMatch* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ACKMatch& from);
  void MergeFrom(const ACKMatch& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 resultCode = 1;
  inline bool has_resultcode() const;
  inline void clear_resultcode();
  static const int kResultCodeFieldNumber = 1;
  inline ::google::protobuf::int32 resultcode() const;
  inline void set_resultcode(::google::protobuf::int32 value);

  // optional .UserRawData enemyUserInfo = 2;
  inline bool has_enemyuserinfo() const;
  inline void clear_enemyuserinfo();
  static const int kEnemyUserInfoFieldNumber = 2;
  inline const ::UserRawData& enemyuserinfo() const;
  inline ::UserRawData* mutable_enemyuserinfo();
  inline ::UserRawData* release_enemyuserinfo();
  inline void set_allocated_enemyuserinfo(::UserRawData* enemyuserinfo);

  // @@protoc_insertion_point(class_scope:wzq.ACKMatch)
 private:
  inline void set_has_resultcode();
  inline void clear_has_resultcode();
  inline void set_has_enemyuserinfo();
  inline void clear_has_enemyuserinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::UserRawData* enemyuserinfo_;
  ::google::protobuf::int32 resultcode_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_wzqGame_2eproto();
  friend void protobuf_AssignDesc_wzqGame_2eproto();
  friend void protobuf_ShutdownFile_wzqGame_2eproto();

  void InitAsDefaultInstance();
  static ACKMatch* default_instance_;
};
// -------------------------------------------------------------------

class NotifyCancelMatch : public ::google::protobuf::Message {
 public:
  NotifyCancelMatch();
  virtual ~NotifyCancelMatch();

  NotifyCancelMatch(const NotifyCancelMatch& from);

  inline NotifyCancelMatch& operator=(const NotifyCancelMatch& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NotifyCancelMatch& default_instance();

  void Swap(NotifyCancelMatch* other);

  // implements Message ----------------------------------------------

  NotifyCancelMatch* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NotifyCancelMatch& from);
  void MergeFrom(const NotifyCancelMatch& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 userId = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::int64 userid() const;
  inline void set_userid(::google::protobuf::int64 value);

  // optional int32 roomType = 2;
  inline bool has_roomtype() const;
  inline void clear_roomtype();
  static const int kRoomTypeFieldNumber = 2;
  inline ::google::protobuf::int32 roomtype() const;
  inline void set_roomtype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:wzq.NotifyCancelMatch)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_roomtype();
  inline void clear_has_roomtype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 userid_;
  ::google::protobuf::int32 roomtype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_wzqGame_2eproto();
  friend void protobuf_AssignDesc_wzqGame_2eproto();
  friend void protobuf_ShutdownFile_wzqGame_2eproto();

  void InitAsDefaultInstance();
  static NotifyCancelMatch* default_instance_;
};
// -------------------------------------------------------------------

class WinPosition_Row : public ::google::protobuf::Message {
 public:
  WinPosition_Row();
  virtual ~WinPosition_Row();

  WinPosition_Row(const WinPosition_Row& from);

  inline WinPosition_Row& operator=(const WinPosition_Row& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WinPosition_Row& default_instance();

  void Swap(WinPosition_Row* other);

  // implements Message ----------------------------------------------

  WinPosition_Row* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WinPosition_Row& from);
  void MergeFrom(const WinPosition_Row& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 values = 1;
  inline int values_size() const;
  inline void clear_values();
  static const int kValuesFieldNumber = 1;
  inline ::google::protobuf::int32 values(int index) const;
  inline void set_values(int index, ::google::protobuf::int32 value);
  inline void add_values(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      values() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_values();

  // @@protoc_insertion_point(class_scope:wzq.WinPosition.Row)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > values_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_wzqGame_2eproto();
  friend void protobuf_AssignDesc_wzqGame_2eproto();
  friend void protobuf_ShutdownFile_wzqGame_2eproto();

  void InitAsDefaultInstance();
  static WinPosition_Row* default_instance_;
};
// -------------------------------------------------------------------

class WinPosition : public ::google::protobuf::Message {
 public:
  WinPosition();
  virtual ~WinPosition();

  WinPosition(const WinPosition& from);

  inline WinPosition& operator=(const WinPosition& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WinPosition& default_instance();

  void Swap(WinPosition* other);

  // implements Message ----------------------------------------------

  WinPosition* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WinPosition& from);
  void MergeFrom(const WinPosition& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef WinPosition_Row Row;

  // accessors -------------------------------------------------------

  // repeated .wzq.WinPosition.Row matrix = 1;
  inline int matrix_size() const;
  inline void clear_matrix();
  static const int kMatrixFieldNumber = 1;
  inline const ::wzq::WinPosition_Row& matrix(int index) const;
  inline ::wzq::WinPosition_Row* mutable_matrix(int index);
  inline ::wzq::WinPosition_Row* add_matrix();
  inline const ::google::protobuf::RepeatedPtrField< ::wzq::WinPosition_Row >&
      matrix() const;
  inline ::google::protobuf::RepeatedPtrField< ::wzq::WinPosition_Row >*
      mutable_matrix();

  // @@protoc_insertion_point(class_scope:wzq.WinPosition)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::wzq::WinPosition_Row > matrix_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_wzqGame_2eproto();
  friend void protobuf_AssignDesc_wzqGame_2eproto();
  friend void protobuf_ShutdownFile_wzqGame_2eproto();

  void InitAsDefaultInstance();
  static WinPosition* default_instance_;
};
// -------------------------------------------------------------------

class GameOver : public ::google::protobuf::Message {
 public:
  GameOver();
  virtual ~GameOver();

  GameOver(const GameOver& from);

  inline GameOver& operator=(const GameOver& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameOver& default_instance();

  void Swap(GameOver* other);

  // implements Message ----------------------------------------------

  GameOver* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GameOver& from);
  void MergeFrom(const GameOver& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .wzq.GameState state = 1;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 1;
  inline ::wzq::GameState state() const;
  inline void set_state(::wzq::GameState value);

  // optional .wzq.WinPosition winposition = 2;
  inline bool has_winposition() const;
  inline void clear_winposition();
  static const int kWinpositionFieldNumber = 2;
  inline const ::wzq::WinPosition& winposition() const;
  inline ::wzq::WinPosition* mutable_winposition();
  inline ::wzq::WinPosition* release_winposition();
  inline void set_allocated_winposition(::wzq::WinPosition* winposition);

  // @@protoc_insertion_point(class_scope:wzq.GameOver)
 private:
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_winposition();
  inline void clear_has_winposition();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::wzq::WinPosition* winposition_;
  int state_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_wzqGame_2eproto();
  friend void protobuf_AssignDesc_wzqGame_2eproto();
  friend void protobuf_ShutdownFile_wzqGame_2eproto();

  void InitAsDefaultInstance();
  static GameOver* default_instance_;
};
// -------------------------------------------------------------------

class NotifyLocalGameStart : public ::google::protobuf::Message {
 public:
  NotifyLocalGameStart();
  virtual ~NotifyLocalGameStart();

  NotifyLocalGameStart(const NotifyLocalGameStart& from);

  inline NotifyLocalGameStart& operator=(const NotifyLocalGameStart& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NotifyLocalGameStart& default_instance();

  void Swap(NotifyLocalGameStart* other);

  // implements Message ----------------------------------------------

  NotifyLocalGameStart* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NotifyLocalGameStart& from);
  void MergeFrom(const NotifyLocalGameStart& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .wzq.ChessColorType chessColor = 1;
  inline bool has_chesscolor() const;
  inline void clear_chesscolor();
  static const int kChessColorFieldNumber = 1;
  inline ::wzq::ChessColorType chesscolor() const;
  inline void set_chesscolor(::wzq::ChessColorType value);

  // @@protoc_insertion_point(class_scope:wzq.NotifyLocalGameStart)
 private:
  inline void set_has_chesscolor();
  inline void clear_has_chesscolor();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int chesscolor_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_wzqGame_2eproto();
  friend void protobuf_AssignDesc_wzqGame_2eproto();
  friend void protobuf_ShutdownFile_wzqGame_2eproto();

  void InitAsDefaultInstance();
  static NotifyLocalGameStart* default_instance_;
};
// -------------------------------------------------------------------

class REQRegretChess : public ::google::protobuf::Message {
 public:
  REQRegretChess();
  virtual ~REQRegretChess();

  REQRegretChess(const REQRegretChess& from);

  inline REQRegretChess& operator=(const REQRegretChess& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const REQRegretChess& default_instance();

  void Swap(REQRegretChess* other);

  // implements Message ----------------------------------------------

  REQRegretChess* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const REQRegretChess& from);
  void MergeFrom(const REQRegretChess& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 resultCode = 1;
  inline bool has_resultcode() const;
  inline void clear_resultcode();
  static const int kResultCodeFieldNumber = 1;
  inline ::google::protobuf::int32 resultcode() const;
  inline void set_resultcode(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:wzq.REQRegretChess)
 private:
  inline void set_has_resultcode();
  inline void clear_has_resultcode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 resultcode_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_wzqGame_2eproto();
  friend void protobuf_AssignDesc_wzqGame_2eproto();
  friend void protobuf_ShutdownFile_wzqGame_2eproto();

  void InitAsDefaultInstance();
  static REQRegretChess* default_instance_;
};
// -------------------------------------------------------------------

class ACKRegretChess : public ::google::protobuf::Message {
 public:
  ACKRegretChess();
  virtual ~ACKRegretChess();

  ACKRegretChess(const ACKRegretChess& from);

  inline ACKRegretChess& operator=(const ACKRegretChess& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ACKRegretChess& default_instance();

  void Swap(ACKRegretChess* other);

  // implements Message ----------------------------------------------

  ACKRegretChess* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ACKRegretChess& from);
  void MergeFrom(const ACKRegretChess& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 resultCode = 1;
  inline bool has_resultcode() const;
  inline void clear_resultcode();
  static const int kResultCodeFieldNumber = 1;
  inline ::google::protobuf::int32 resultcode() const;
  inline void set_resultcode(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:wzq.ACKRegretChess)
 private:
  inline void set_has_resultcode();
  inline void clear_has_resultcode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 resultcode_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_wzqGame_2eproto();
  friend void protobuf_AssignDesc_wzqGame_2eproto();
  friend void protobuf_ShutdownFile_wzqGame_2eproto();

  void InitAsDefaultInstance();
  static ACKRegretChess* default_instance_;
};
// -------------------------------------------------------------------

class REQAgreeRegretChess : public ::google::protobuf::Message {
 public:
  REQAgreeRegretChess();
  virtual ~REQAgreeRegretChess();

  REQAgreeRegretChess(const REQAgreeRegretChess& from);

  inline REQAgreeRegretChess& operator=(const REQAgreeRegretChess& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const REQAgreeRegretChess& default_instance();

  void Swap(REQAgreeRegretChess* other);

  // implements Message ----------------------------------------------

  REQAgreeRegretChess* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const REQAgreeRegretChess& from);
  void MergeFrom(const REQAgreeRegretChess& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 resultCode = 1;
  inline bool has_resultcode() const;
  inline void clear_resultcode();
  static const int kResultCodeFieldNumber = 1;
  inline ::google::protobuf::int32 resultcode() const;
  inline void set_resultcode(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:wzq.REQAgreeRegretChess)
 private:
  inline void set_has_resultcode();
  inline void clear_has_resultcode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 resultcode_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_wzqGame_2eproto();
  friend void protobuf_AssignDesc_wzqGame_2eproto();
  friend void protobuf_ShutdownFile_wzqGame_2eproto();

  void InitAsDefaultInstance();
  static REQAgreeRegretChess* default_instance_;
};
// -------------------------------------------------------------------

class ACKAgreeRegretChess : public ::google::protobuf::Message {
 public:
  ACKAgreeRegretChess();
  virtual ~ACKAgreeRegretChess();

  ACKAgreeRegretChess(const ACKAgreeRegretChess& from);

  inline ACKAgreeRegretChess& operator=(const ACKAgreeRegretChess& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ACKAgreeRegretChess& default_instance();

  void Swap(ACKAgreeRegretChess* other);

  // implements Message ----------------------------------------------

  ACKAgreeRegretChess* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ACKAgreeRegretChess& from);
  void MergeFrom(const ACKAgreeRegretChess& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 resultCode = 1;
  inline bool has_resultcode() const;
  inline void clear_resultcode();
  static const int kResultCodeFieldNumber = 1;
  inline ::google::protobuf::int32 resultcode() const;
  inline void set_resultcode(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:wzq.ACKAgreeRegretChess)
 private:
  inline void set_has_resultcode();
  inline void clear_has_resultcode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 resultcode_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_wzqGame_2eproto();
  friend void protobuf_AssignDesc_wzqGame_2eproto();
  friend void protobuf_ShutdownFile_wzqGame_2eproto();

  void InitAsDefaultInstance();
  static ACKAgreeRegretChess* default_instance_;
};
// -------------------------------------------------------------------

class REQDisAgreeRegretChess : public ::google::protobuf::Message {
 public:
  REQDisAgreeRegretChess();
  virtual ~REQDisAgreeRegretChess();

  REQDisAgreeRegretChess(const REQDisAgreeRegretChess& from);

  inline REQDisAgreeRegretChess& operator=(const REQDisAgreeRegretChess& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const REQDisAgreeRegretChess& default_instance();

  void Swap(REQDisAgreeRegretChess* other);

  // implements Message ----------------------------------------------

  REQDisAgreeRegretChess* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const REQDisAgreeRegretChess& from);
  void MergeFrom(const REQDisAgreeRegretChess& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 resultCode = 1;
  inline bool has_resultcode() const;
  inline void clear_resultcode();
  static const int kResultCodeFieldNumber = 1;
  inline ::google::protobuf::int32 resultcode() const;
  inline void set_resultcode(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:wzq.REQDisAgreeRegretChess)
 private:
  inline void set_has_resultcode();
  inline void clear_has_resultcode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 resultcode_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_wzqGame_2eproto();
  friend void protobuf_AssignDesc_wzqGame_2eproto();
  friend void protobuf_ShutdownFile_wzqGame_2eproto();

  void InitAsDefaultInstance();
  static REQDisAgreeRegretChess* default_instance_;
};
// -------------------------------------------------------------------

class ACKDisAgreeRegretChess : public ::google::protobuf::Message {
 public:
  ACKDisAgreeRegretChess();
  virtual ~ACKDisAgreeRegretChess();

  ACKDisAgreeRegretChess(const ACKDisAgreeRegretChess& from);

  inline ACKDisAgreeRegretChess& operator=(const ACKDisAgreeRegretChess& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ACKDisAgreeRegretChess& default_instance();

  void Swap(ACKDisAgreeRegretChess* other);

  // implements Message ----------------------------------------------

  ACKDisAgreeRegretChess* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ACKDisAgreeRegretChess& from);
  void MergeFrom(const ACKDisAgreeRegretChess& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 resultCode = 1;
  inline bool has_resultcode() const;
  inline void clear_resultcode();
  static const int kResultCodeFieldNumber = 1;
  inline ::google::protobuf::int32 resultcode() const;
  inline void set_resultcode(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:wzq.ACKDisAgreeRegretChess)
 private:
  inline void set_has_resultcode();
  inline void clear_has_resultcode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 resultcode_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_wzqGame_2eproto();
  friend void protobuf_AssignDesc_wzqGame_2eproto();
  friend void protobuf_ShutdownFile_wzqGame_2eproto();

  void InitAsDefaultInstance();
  static ACKDisAgreeRegretChess* default_instance_;
};
// -------------------------------------------------------------------

class NotifyGiveUp : public ::google::protobuf::Message {
 public:
  NotifyGiveUp();
  virtual ~NotifyGiveUp();

  NotifyGiveUp(const NotifyGiveUp& from);

  inline NotifyGiveUp& operator=(const NotifyGiveUp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NotifyGiveUp& default_instance();

  void Swap(NotifyGiveUp* other);

  // implements Message ----------------------------------------------

  NotifyGiveUp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NotifyGiveUp& from);
  void MergeFrom(const NotifyGiveUp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:wzq.NotifyGiveUp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_wzqGame_2eproto();
  friend void protobuf_AssignDesc_wzqGame_2eproto();
  friend void protobuf_ShutdownFile_wzqGame_2eproto();

  void InitAsDefaultInstance();
  static NotifyGiveUp* default_instance_;
};
// -------------------------------------------------------------------

class NotifyPeaceChess : public ::google::protobuf::Message {
 public:
  NotifyPeaceChess();
  virtual ~NotifyPeaceChess();

  NotifyPeaceChess(const NotifyPeaceChess& from);

  inline NotifyPeaceChess& operator=(const NotifyPeaceChess& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NotifyPeaceChess& default_instance();

  void Swap(NotifyPeaceChess* other);

  // implements Message ----------------------------------------------

  NotifyPeaceChess* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NotifyPeaceChess& from);
  void MergeFrom(const NotifyPeaceChess& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:wzq.NotifyPeaceChess)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_wzqGame_2eproto();
  friend void protobuf_AssignDesc_wzqGame_2eproto();
  friend void protobuf_ShutdownFile_wzqGame_2eproto();

  void InitAsDefaultInstance();
  static NotifyPeaceChess* default_instance_;
};
// -------------------------------------------------------------------

class NotifyASKPeaceChess : public ::google::protobuf::Message {
 public:
  NotifyASKPeaceChess();
  virtual ~NotifyASKPeaceChess();

  NotifyASKPeaceChess(const NotifyASKPeaceChess& from);

  inline NotifyASKPeaceChess& operator=(const NotifyASKPeaceChess& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NotifyASKPeaceChess& default_instance();

  void Swap(NotifyASKPeaceChess* other);

  // implements Message ----------------------------------------------

  NotifyASKPeaceChess* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NotifyASKPeaceChess& from);
  void MergeFrom(const NotifyASKPeaceChess& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:wzq.NotifyASKPeaceChess)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_wzqGame_2eproto();
  friend void protobuf_AssignDesc_wzqGame_2eproto();
  friend void protobuf_ShutdownFile_wzqGame_2eproto();

  void InitAsDefaultInstance();
  static NotifyASKPeaceChess* default_instance_;
};
// -------------------------------------------------------------------

class NotifyAgreePeaceChess : public ::google::protobuf::Message {
 public:
  NotifyAgreePeaceChess();
  virtual ~NotifyAgreePeaceChess();

  NotifyAgreePeaceChess(const NotifyAgreePeaceChess& from);

  inline NotifyAgreePeaceChess& operator=(const NotifyAgreePeaceChess& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NotifyAgreePeaceChess& default_instance();

  void Swap(NotifyAgreePeaceChess* other);

  // implements Message ----------------------------------------------

  NotifyAgreePeaceChess* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NotifyAgreePeaceChess& from);
  void MergeFrom(const NotifyAgreePeaceChess& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:wzq.NotifyAgreePeaceChess)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_wzqGame_2eproto();
  friend void protobuf_AssignDesc_wzqGame_2eproto();
  friend void protobuf_ShutdownFile_wzqGame_2eproto();

  void InitAsDefaultInstance();
  static NotifyAgreePeaceChess* default_instance_;
};
// -------------------------------------------------------------------

class NotifyDisagreePeaceChess : public ::google::protobuf::Message {
 public:
  NotifyDisagreePeaceChess();
  virtual ~NotifyDisagreePeaceChess();

  NotifyDisagreePeaceChess(const NotifyDisagreePeaceChess& from);

  inline NotifyDisagreePeaceChess& operator=(const NotifyDisagreePeaceChess& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NotifyDisagreePeaceChess& default_instance();

  void Swap(NotifyDisagreePeaceChess* other);

  // implements Message ----------------------------------------------

  NotifyDisagreePeaceChess* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NotifyDisagreePeaceChess& from);
  void MergeFrom(const NotifyDisagreePeaceChess& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:wzq.NotifyDisagreePeaceChess)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_wzqGame_2eproto();
  friend void protobuf_AssignDesc_wzqGame_2eproto();
  friend void protobuf_ShutdownFile_wzqGame_2eproto();

  void InitAsDefaultInstance();
  static NotifyDisagreePeaceChess* default_instance_;
};
// -------------------------------------------------------------------

class ACKAgreePeaceChess : public ::google::protobuf::Message {
 public:
  ACKAgreePeaceChess();
  virtual ~ACKAgreePeaceChess();

  ACKAgreePeaceChess(const ACKAgreePeaceChess& from);

  inline ACKAgreePeaceChess& operator=(const ACKAgreePeaceChess& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ACKAgreePeaceChess& default_instance();

  void Swap(ACKAgreePeaceChess* other);

  // implements Message ----------------------------------------------

  ACKAgreePeaceChess* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ACKAgreePeaceChess& from);
  void MergeFrom(const ACKAgreePeaceChess& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:wzq.ACKAgreePeaceChess)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_wzqGame_2eproto();
  friend void protobuf_AssignDesc_wzqGame_2eproto();
  friend void protobuf_ShutdownFile_wzqGame_2eproto();

  void InitAsDefaultInstance();
  static ACKAgreePeaceChess* default_instance_;
};
// -------------------------------------------------------------------

class ACKDisagreePeaceChess : public ::google::protobuf::Message {
 public:
  ACKDisagreePeaceChess();
  virtual ~ACKDisagreePeaceChess();

  ACKDisagreePeaceChess(const ACKDisagreePeaceChess& from);

  inline ACKDisagreePeaceChess& operator=(const ACKDisagreePeaceChess& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ACKDisagreePeaceChess& default_instance();

  void Swap(ACKDisagreePeaceChess* other);

  // implements Message ----------------------------------------------

  ACKDisagreePeaceChess* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ACKDisagreePeaceChess& from);
  void MergeFrom(const ACKDisagreePeaceChess& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:wzq.ACKDisagreePeaceChess)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_wzqGame_2eproto();
  friend void protobuf_AssignDesc_wzqGame_2eproto();
  friend void protobuf_ShutdownFile_wzqGame_2eproto();

  void InitAsDefaultInstance();
  static ACKDisagreePeaceChess* default_instance_;
};
// -------------------------------------------------------------------

class ChessMove : public ::google::protobuf::Message {
 public:
  ChessMove();
  virtual ~ChessMove();

  ChessMove(const ChessMove& from);

  inline ChessMove& operator=(const ChessMove& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChessMove& default_instance();

  void Swap(ChessMove* other);

  // implements Message ----------------------------------------------

  ChessMove* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChessMove& from);
  void MergeFrom(const ChessMove& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline ::google::protobuf::int32 x() const;
  inline void set_x(::google::protobuf::int32 value);

  // optional int32 y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline ::google::protobuf::int32 y() const;
  inline void set_y(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:wzq.ChessMove)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 y_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_wzqGame_2eproto();
  friend void protobuf_AssignDesc_wzqGame_2eproto();
  friend void protobuf_ShutdownFile_wzqGame_2eproto();

  void InitAsDefaultInstance();
  static ChessMove* default_instance_;
};
// -------------------------------------------------------------------

class PlayingResult : public ::google::protobuf::Message {
 public:
  PlayingResult();
  virtual ~PlayingResult();

  PlayingResult(const PlayingResult& from);

  inline PlayingResult& operator=(const PlayingResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayingResult& default_instance();

  void Swap(PlayingResult* other);

  // implements Message ----------------------------------------------

  PlayingResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayingResult& from);
  void MergeFrom(const PlayingResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .wzq.GameState gameresult = 1;
  inline bool has_gameresult() const;
  inline void clear_gameresult();
  static const int kGameresultFieldNumber = 1;
  inline ::wzq::GameState gameresult() const;
  inline void set_gameresult(::wzq::GameState value);

  // optional int64 winuserID = 2;
  inline bool has_winuserid() const;
  inline void clear_winuserid();
  static const int kWinuserIDFieldNumber = 2;
  inline ::google::protobuf::int64 winuserid() const;
  inline void set_winuserid(::google::protobuf::int64 value);

  // optional int64 loseuserID = 3;
  inline bool has_loseuserid() const;
  inline void clear_loseuserid();
  static const int kLoseuserIDFieldNumber = 3;
  inline ::google::protobuf::int64 loseuserid() const;
  inline void set_loseuserid(::google::protobuf::int64 value);

  // optional .wzq.ChessColorType color = 4;
  inline bool has_color() const;
  inline void clear_color();
  static const int kColorFieldNumber = 4;
  inline ::wzq::ChessColorType color() const;
  inline void set_color(::wzq::ChessColorType value);

  // repeated .wzq.ChessMove moves = 5;
  inline int moves_size() const;
  inline void clear_moves();
  static const int kMovesFieldNumber = 5;
  inline const ::wzq::ChessMove& moves(int index) const;
  inline ::wzq::ChessMove* mutable_moves(int index);
  inline ::wzq::ChessMove* add_moves();
  inline const ::google::protobuf::RepeatedPtrField< ::wzq::ChessMove >&
      moves() const;
  inline ::google::protobuf::RepeatedPtrField< ::wzq::ChessMove >*
      mutable_moves();

  // @@protoc_insertion_point(class_scope:wzq.PlayingResult)
 private:
  inline void set_has_gameresult();
  inline void clear_has_gameresult();
  inline void set_has_winuserid();
  inline void clear_has_winuserid();
  inline void set_has_loseuserid();
  inline void clear_has_loseuserid();
  inline void set_has_color();
  inline void clear_has_color();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 winuserid_;
  int gameresult_;
  int color_;
  ::google::protobuf::int64 loseuserid_;
  ::google::protobuf::RepeatedPtrField< ::wzq::ChessMove > moves_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_wzqGame_2eproto();
  friend void protobuf_AssignDesc_wzqGame_2eproto();
  friend void protobuf_ShutdownFile_wzqGame_2eproto();

  void InitAsDefaultInstance();
  static PlayingResult* default_instance_;
};
// ===================================================================


// ===================================================================

// REQCreateTable

// optional int64 userID = 1;
inline bool REQCreateTable::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void REQCreateTable::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void REQCreateTable::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void REQCreateTable::clear_userid() {
  userid_ = GOOGLE_LONGLONG(0);
  clear_has_userid();
}
inline ::google::protobuf::int64 REQCreateTable::userid() const {
  return userid_;
}
inline void REQCreateTable::set_userid(::google::protobuf::int64 value) {
  set_has_userid();
  userid_ = value;
}

// -------------------------------------------------------------------

// ACKCreateTable

// optional int32 resultCode = 1;
inline bool ACKCreateTable::has_resultcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ACKCreateTable::set_has_resultcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ACKCreateTable::clear_has_resultcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ACKCreateTable::clear_resultcode() {
  resultcode_ = 0;
  clear_has_resultcode();
}
inline ::google::protobuf::int32 ACKCreateTable::resultcode() const {
  return resultcode_;
}
inline void ACKCreateTable::set_resultcode(::google::protobuf::int32 value) {
  set_has_resultcode();
  resultcode_ = value;
}

// optional string tableID = 2;
inline bool ACKCreateTable::has_tableid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ACKCreateTable::set_has_tableid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ACKCreateTable::clear_has_tableid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ACKCreateTable::clear_tableid() {
  if (tableid_ != &::google::protobuf::internal::kEmptyString) {
    tableid_->clear();
  }
  clear_has_tableid();
}
inline const ::std::string& ACKCreateTable::tableid() const {
  return *tableid_;
}
inline void ACKCreateTable::set_tableid(const ::std::string& value) {
  set_has_tableid();
  if (tableid_ == &::google::protobuf::internal::kEmptyString) {
    tableid_ = new ::std::string;
  }
  tableid_->assign(value);
}
inline void ACKCreateTable::set_tableid(const char* value) {
  set_has_tableid();
  if (tableid_ == &::google::protobuf::internal::kEmptyString) {
    tableid_ = new ::std::string;
  }
  tableid_->assign(value);
}
inline void ACKCreateTable::set_tableid(const char* value, size_t size) {
  set_has_tableid();
  if (tableid_ == &::google::protobuf::internal::kEmptyString) {
    tableid_ = new ::std::string;
  }
  tableid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ACKCreateTable::mutable_tableid() {
  set_has_tableid();
  if (tableid_ == &::google::protobuf::internal::kEmptyString) {
    tableid_ = new ::std::string;
  }
  return tableid_;
}
inline ::std::string* ACKCreateTable::release_tableid() {
  clear_has_tableid();
  if (tableid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = tableid_;
    tableid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ACKCreateTable::set_allocated_tableid(::std::string* tableid) {
  if (tableid_ != &::google::protobuf::internal::kEmptyString) {
    delete tableid_;
  }
  if (tableid) {
    set_has_tableid();
    tableid_ = tableid;
  } else {
    clear_has_tableid();
    tableid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// REQJoinTable

// optional int64 userID = 1;
inline bool REQJoinTable::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void REQJoinTable::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void REQJoinTable::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void REQJoinTable::clear_userid() {
  userid_ = GOOGLE_LONGLONG(0);
  clear_has_userid();
}
inline ::google::protobuf::int64 REQJoinTable::userid() const {
  return userid_;
}
inline void REQJoinTable::set_userid(::google::protobuf::int64 value) {
  set_has_userid();
  userid_ = value;
}

// optional string tableID = 2;
inline bool REQJoinTable::has_tableid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void REQJoinTable::set_has_tableid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void REQJoinTable::clear_has_tableid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void REQJoinTable::clear_tableid() {
  if (tableid_ != &::google::protobuf::internal::kEmptyString) {
    tableid_->clear();
  }
  clear_has_tableid();
}
inline const ::std::string& REQJoinTable::tableid() const {
  return *tableid_;
}
inline void REQJoinTable::set_tableid(const ::std::string& value) {
  set_has_tableid();
  if (tableid_ == &::google::protobuf::internal::kEmptyString) {
    tableid_ = new ::std::string;
  }
  tableid_->assign(value);
}
inline void REQJoinTable::set_tableid(const char* value) {
  set_has_tableid();
  if (tableid_ == &::google::protobuf::internal::kEmptyString) {
    tableid_ = new ::std::string;
  }
  tableid_->assign(value);
}
inline void REQJoinTable::set_tableid(const char* value, size_t size) {
  set_has_tableid();
  if (tableid_ == &::google::protobuf::internal::kEmptyString) {
    tableid_ = new ::std::string;
  }
  tableid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* REQJoinTable::mutable_tableid() {
  set_has_tableid();
  if (tableid_ == &::google::protobuf::internal::kEmptyString) {
    tableid_ = new ::std::string;
  }
  return tableid_;
}
inline ::std::string* REQJoinTable::release_tableid() {
  clear_has_tableid();
  if (tableid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = tableid_;
    tableid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void REQJoinTable::set_allocated_tableid(::std::string* tableid) {
  if (tableid_ != &::google::protobuf::internal::kEmptyString) {
    delete tableid_;
  }
  if (tableid) {
    set_has_tableid();
    tableid_ = tableid;
  } else {
    clear_has_tableid();
    tableid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// ACKJoinTable

// optional int32 resultCode = 1;
inline bool ACKJoinTable::has_resultcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ACKJoinTable::set_has_resultcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ACKJoinTable::clear_has_resultcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ACKJoinTable::clear_resultcode() {
  resultcode_ = 0;
  clear_has_resultcode();
}
inline ::google::protobuf::int32 ACKJoinTable::resultcode() const {
  return resultcode_;
}
inline void ACKJoinTable::set_resultcode(::google::protobuf::int32 value) {
  set_has_resultcode();
  resultcode_ = value;
}

// -------------------------------------------------------------------

// UpdateTableStatus

// optional string tableID = 1;
inline bool UpdateTableStatus::has_tableid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UpdateTableStatus::set_has_tableid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UpdateTableStatus::clear_has_tableid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UpdateTableStatus::clear_tableid() {
  if (tableid_ != &::google::protobuf::internal::kEmptyString) {
    tableid_->clear();
  }
  clear_has_tableid();
}
inline const ::std::string& UpdateTableStatus::tableid() const {
  return *tableid_;
}
inline void UpdateTableStatus::set_tableid(const ::std::string& value) {
  set_has_tableid();
  if (tableid_ == &::google::protobuf::internal::kEmptyString) {
    tableid_ = new ::std::string;
  }
  tableid_->assign(value);
}
inline void UpdateTableStatus::set_tableid(const char* value) {
  set_has_tableid();
  if (tableid_ == &::google::protobuf::internal::kEmptyString) {
    tableid_ = new ::std::string;
  }
  tableid_->assign(value);
}
inline void UpdateTableStatus::set_tableid(const char* value, size_t size) {
  set_has_tableid();
  if (tableid_ == &::google::protobuf::internal::kEmptyString) {
    tableid_ = new ::std::string;
  }
  tableid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UpdateTableStatus::mutable_tableid() {
  set_has_tableid();
  if (tableid_ == &::google::protobuf::internal::kEmptyString) {
    tableid_ = new ::std::string;
  }
  return tableid_;
}
inline ::std::string* UpdateTableStatus::release_tableid() {
  clear_has_tableid();
  if (tableid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = tableid_;
    tableid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void UpdateTableStatus::set_allocated_tableid(::std::string* tableid) {
  if (tableid_ != &::google::protobuf::internal::kEmptyString) {
    delete tableid_;
  }
  if (tableid) {
    set_has_tableid();
    tableid_ = tableid;
  } else {
    clear_has_tableid();
    tableid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .wzq.PlayerStatus players = 2;
inline int UpdateTableStatus::players_size() const {
  return players_.size();
}
inline void UpdateTableStatus::clear_players() {
  players_.Clear();
}
inline const ::wzq::PlayerStatus& UpdateTableStatus::players(int index) const {
  return players_.Get(index);
}
inline ::wzq::PlayerStatus* UpdateTableStatus::mutable_players(int index) {
  return players_.Mutable(index);
}
inline ::wzq::PlayerStatus* UpdateTableStatus::add_players() {
  return players_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::wzq::PlayerStatus >&
UpdateTableStatus::players() const {
  return players_;
}
inline ::google::protobuf::RepeatedPtrField< ::wzq::PlayerStatus >*
UpdateTableStatus::mutable_players() {
  return &players_;
}

// -------------------------------------------------------------------

// PlayerStatus

// optional .UserRawData baseInfo = 1;
inline bool PlayerStatus::has_baseinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerStatus::set_has_baseinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerStatus::clear_has_baseinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerStatus::clear_baseinfo() {
  if (baseinfo_ != NULL) baseinfo_->::UserRawData::Clear();
  clear_has_baseinfo();
}
inline const ::UserRawData& PlayerStatus::baseinfo() const {
  return baseinfo_ != NULL ? *baseinfo_ : *default_instance_->baseinfo_;
}
inline ::UserRawData* PlayerStatus::mutable_baseinfo() {
  set_has_baseinfo();
  if (baseinfo_ == NULL) baseinfo_ = new ::UserRawData;
  return baseinfo_;
}
inline ::UserRawData* PlayerStatus::release_baseinfo() {
  clear_has_baseinfo();
  ::UserRawData* temp = baseinfo_;
  baseinfo_ = NULL;
  return temp;
}
inline void PlayerStatus::set_allocated_baseinfo(::UserRawData* baseinfo) {
  delete baseinfo_;
  baseinfo_ = baseinfo;
  if (baseinfo) {
    set_has_baseinfo();
  } else {
    clear_has_baseinfo();
  }
}

// optional .wzq.GameState state = 2;
inline bool PlayerStatus::has_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlayerStatus::set_has_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlayerStatus::clear_has_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlayerStatus::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::wzq::GameState PlayerStatus::state() const {
  return static_cast< ::wzq::GameState >(state_);
}
inline void PlayerStatus::set_state(::wzq::GameState value) {
  assert(::wzq::GameState_IsValid(value));
  set_has_state();
  state_ = value;
}

// optional .wzq.ChessColorType color = 3;
inline bool PlayerStatus::has_color() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PlayerStatus::set_has_color() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PlayerStatus::clear_has_color() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PlayerStatus::clear_color() {
  color_ = 0;
  clear_has_color();
}
inline ::wzq::ChessColorType PlayerStatus::color() const {
  return static_cast< ::wzq::ChessColorType >(color_);
}
inline void PlayerStatus::set_color(::wzq::ChessColorType value) {
  assert(::wzq::ChessColorType_IsValid(value));
  set_has_color();
  color_ = value;
}

// -------------------------------------------------------------------

// REQReadyGame

// -------------------------------------------------------------------

// ACKReadyGame

// optional int32 resultCode = 1;
inline bool ACKReadyGame::has_resultcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ACKReadyGame::set_has_resultcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ACKReadyGame::clear_has_resultcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ACKReadyGame::clear_resultcode() {
  resultcode_ = 0;
  clear_has_resultcode();
}
inline ::google::protobuf::int32 ACKReadyGame::resultcode() const {
  return resultcode_;
}
inline void ACKReadyGame::set_resultcode(::google::protobuf::int32 value) {
  set_has_resultcode();
  resultcode_ = value;
}

// -------------------------------------------------------------------

// REQStartMatch

// optional int64 userID = 1;
inline bool REQStartMatch::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void REQStartMatch::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void REQStartMatch::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void REQStartMatch::clear_userid() {
  userid_ = GOOGLE_LONGLONG(0);
  clear_has_userid();
}
inline ::google::protobuf::int64 REQStartMatch::userid() const {
  return userid_;
}
inline void REQStartMatch::set_userid(::google::protobuf::int64 value) {
  set_has_userid();
  userid_ = value;
}

// -------------------------------------------------------------------

// REQStartGame

// optional int64 userID = 1;
inline bool REQStartGame::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void REQStartGame::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void REQStartGame::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void REQStartGame::clear_userid() {
  userid_ = GOOGLE_LONGLONG(0);
  clear_has_userid();
}
inline ::google::protobuf::int64 REQStartGame::userid() const {
  return userid_;
}
inline void REQStartGame::set_userid(::google::protobuf::int64 value) {
  set_has_userid();
  userid_ = value;
}

// -------------------------------------------------------------------

// ACKStartGame

// optional int32 resultCode = 1;
inline bool ACKStartGame::has_resultcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ACKStartGame::set_has_resultcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ACKStartGame::clear_has_resultcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ACKStartGame::clear_resultcode() {
  resultcode_ = 0;
  clear_has_resultcode();
}
inline ::google::protobuf::int32 ACKStartGame::resultcode() const {
  return resultcode_;
}
inline void ACKStartGame::set_resultcode(::google::protobuf::int32 value) {
  set_has_resultcode();
  resultcode_ = value;
}

// -------------------------------------------------------------------

// ACKStartMatch

// optional int32 resultCode = 1;
inline bool ACKStartMatch::has_resultcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ACKStartMatch::set_has_resultcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ACKStartMatch::clear_has_resultcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ACKStartMatch::clear_resultcode() {
  resultcode_ = 0;
  clear_has_resultcode();
}
inline ::google::protobuf::int32 ACKStartMatch::resultcode() const {
  return resultcode_;
}
inline void ACKStartMatch::set_resultcode(::google::protobuf::int32 value) {
  set_has_resultcode();
  resultcode_ = value;
}

// -------------------------------------------------------------------

// NotifyCreateTable

// repeated int64 players = 1;
inline int NotifyCreateTable::players_size() const {
  return players_.size();
}
inline void NotifyCreateTable::clear_players() {
  players_.Clear();
}
inline ::google::protobuf::int64 NotifyCreateTable::players(int index) const {
  return players_.Get(index);
}
inline void NotifyCreateTable::set_players(int index, ::google::protobuf::int64 value) {
  players_.Set(index, value);
}
inline void NotifyCreateTable::add_players(::google::protobuf::int64 value) {
  players_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
NotifyCreateTable::players() const {
  return players_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
NotifyCreateTable::mutable_players() {
  return &players_;
}

// -------------------------------------------------------------------

// NotifyStartGame

// required int64 userId1 = 1;
inline bool NotifyStartGame::has_userid1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NotifyStartGame::set_has_userid1() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NotifyStartGame::clear_has_userid1() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NotifyStartGame::clear_userid1() {
  userid1_ = GOOGLE_LONGLONG(0);
  clear_has_userid1();
}
inline ::google::protobuf::int64 NotifyStartGame::userid1() const {
  return userid1_;
}
inline void NotifyStartGame::set_userid1(::google::protobuf::int64 value) {
  set_has_userid1();
  userid1_ = value;
}

// required int64 userId2 = 2;
inline bool NotifyStartGame::has_userid2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NotifyStartGame::set_has_userid2() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NotifyStartGame::clear_has_userid2() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NotifyStartGame::clear_userid2() {
  userid2_ = GOOGLE_LONGLONG(0);
  clear_has_userid2();
}
inline ::google::protobuf::int64 NotifyStartGame::userid2() const {
  return userid2_;
}
inline void NotifyStartGame::set_userid2(::google::protobuf::int64 value) {
  set_has_userid2();
  userid2_ = value;
}

// -------------------------------------------------------------------

// REQDownChess

// optional int64 user_id = 1;
inline bool REQDownChess::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void REQDownChess::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void REQDownChess::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void REQDownChess::clear_user_id() {
  user_id_ = GOOGLE_LONGLONG(0);
  clear_has_user_id();
}
inline ::google::protobuf::int64 REQDownChess::user_id() const {
  return user_id_;
}
inline void REQDownChess::set_user_id(::google::protobuf::int64 value) {
  set_has_user_id();
  user_id_ = value;
}

// optional int32 posX = 2;
inline bool REQDownChess::has_posx() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void REQDownChess::set_has_posx() {
  _has_bits_[0] |= 0x00000002u;
}
inline void REQDownChess::clear_has_posx() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void REQDownChess::clear_posx() {
  posx_ = 0;
  clear_has_posx();
}
inline ::google::protobuf::int32 REQDownChess::posx() const {
  return posx_;
}
inline void REQDownChess::set_posx(::google::protobuf::int32 value) {
  set_has_posx();
  posx_ = value;
}

// optional int32 posY = 3;
inline bool REQDownChess::has_posy() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void REQDownChess::set_has_posy() {
  _has_bits_[0] |= 0x00000004u;
}
inline void REQDownChess::clear_has_posy() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void REQDownChess::clear_posy() {
  posy_ = 0;
  clear_has_posy();
}
inline ::google::protobuf::int32 REQDownChess::posy() const {
  return posy_;
}
inline void REQDownChess::set_posy(::google::protobuf::int32 value) {
  set_has_posy();
  posy_ = value;
}

// -------------------------------------------------------------------

// ACKDownChess

// optional int32 posX = 1;
inline bool ACKDownChess::has_posx() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ACKDownChess::set_has_posx() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ACKDownChess::clear_has_posx() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ACKDownChess::clear_posx() {
  posx_ = 0;
  clear_has_posx();
}
inline ::google::protobuf::int32 ACKDownChess::posx() const {
  return posx_;
}
inline void ACKDownChess::set_posx(::google::protobuf::int32 value) {
  set_has_posx();
  posx_ = value;
}

// optional int32 posY = 2;
inline bool ACKDownChess::has_posy() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ACKDownChess::set_has_posy() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ACKDownChess::clear_has_posy() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ACKDownChess::clear_posy() {
  posy_ = 0;
  clear_has_posy();
}
inline ::google::protobuf::int32 ACKDownChess::posy() const {
  return posy_;
}
inline void ACKDownChess::set_posy(::google::protobuf::int32 value) {
  set_has_posy();
  posy_ = value;
}

// optional .wzq.ChessColorType color = 3;
inline bool ACKDownChess::has_color() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ACKDownChess::set_has_color() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ACKDownChess::clear_has_color() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ACKDownChess::clear_color() {
  color_ = 0;
  clear_has_color();
}
inline ::wzq::ChessColorType ACKDownChess::color() const {
  return static_cast< ::wzq::ChessColorType >(color_);
}
inline void ACKDownChess::set_color(::wzq::ChessColorType value) {
  assert(::wzq::ChessColorType_IsValid(value));
  set_has_color();
  color_ = value;
}

// -------------------------------------------------------------------

// REQMatch

// optional int64 userID = 1;
inline bool REQMatch::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void REQMatch::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void REQMatch::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void REQMatch::clear_userid() {
  userid_ = GOOGLE_LONGLONG(0);
  clear_has_userid();
}
inline ::google::protobuf::int64 REQMatch::userid() const {
  return userid_;
}
inline void REQMatch::set_userid(::google::protobuf::int64 value) {
  set_has_userid();
  userid_ = value;
}

// required int32 roomType = 2;
inline bool REQMatch::has_roomtype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void REQMatch::set_has_roomtype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void REQMatch::clear_has_roomtype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void REQMatch::clear_roomtype() {
  roomtype_ = 0;
  clear_has_roomtype();
}
inline ::google::protobuf::int32 REQMatch::roomtype() const {
  return roomtype_;
}
inline void REQMatch::set_roomtype(::google::protobuf::int32 value) {
  set_has_roomtype();
  roomtype_ = value;
}

// -------------------------------------------------------------------

// ACKMatch

// optional int32 resultCode = 1;
inline bool ACKMatch::has_resultcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ACKMatch::set_has_resultcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ACKMatch::clear_has_resultcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ACKMatch::clear_resultcode() {
  resultcode_ = 0;
  clear_has_resultcode();
}
inline ::google::protobuf::int32 ACKMatch::resultcode() const {
  return resultcode_;
}
inline void ACKMatch::set_resultcode(::google::protobuf::int32 value) {
  set_has_resultcode();
  resultcode_ = value;
}

// optional .UserRawData enemyUserInfo = 2;
inline bool ACKMatch::has_enemyuserinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ACKMatch::set_has_enemyuserinfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ACKMatch::clear_has_enemyuserinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ACKMatch::clear_enemyuserinfo() {
  if (enemyuserinfo_ != NULL) enemyuserinfo_->::UserRawData::Clear();
  clear_has_enemyuserinfo();
}
inline const ::UserRawData& ACKMatch::enemyuserinfo() const {
  return enemyuserinfo_ != NULL ? *enemyuserinfo_ : *default_instance_->enemyuserinfo_;
}
inline ::UserRawData* ACKMatch::mutable_enemyuserinfo() {
  set_has_enemyuserinfo();
  if (enemyuserinfo_ == NULL) enemyuserinfo_ = new ::UserRawData;
  return enemyuserinfo_;
}
inline ::UserRawData* ACKMatch::release_enemyuserinfo() {
  clear_has_enemyuserinfo();
  ::UserRawData* temp = enemyuserinfo_;
  enemyuserinfo_ = NULL;
  return temp;
}
inline void ACKMatch::set_allocated_enemyuserinfo(::UserRawData* enemyuserinfo) {
  delete enemyuserinfo_;
  enemyuserinfo_ = enemyuserinfo;
  if (enemyuserinfo) {
    set_has_enemyuserinfo();
  } else {
    clear_has_enemyuserinfo();
  }
}

// -------------------------------------------------------------------

// NotifyCancelMatch

// optional int64 userId = 1;
inline bool NotifyCancelMatch::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NotifyCancelMatch::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NotifyCancelMatch::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NotifyCancelMatch::clear_userid() {
  userid_ = GOOGLE_LONGLONG(0);
  clear_has_userid();
}
inline ::google::protobuf::int64 NotifyCancelMatch::userid() const {
  return userid_;
}
inline void NotifyCancelMatch::set_userid(::google::protobuf::int64 value) {
  set_has_userid();
  userid_ = value;
}

// optional int32 roomType = 2;
inline bool NotifyCancelMatch::has_roomtype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NotifyCancelMatch::set_has_roomtype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NotifyCancelMatch::clear_has_roomtype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NotifyCancelMatch::clear_roomtype() {
  roomtype_ = 0;
  clear_has_roomtype();
}
inline ::google::protobuf::int32 NotifyCancelMatch::roomtype() const {
  return roomtype_;
}
inline void NotifyCancelMatch::set_roomtype(::google::protobuf::int32 value) {
  set_has_roomtype();
  roomtype_ = value;
}

// -------------------------------------------------------------------

// WinPosition_Row

// repeated int32 values = 1;
inline int WinPosition_Row::values_size() const {
  return values_.size();
}
inline void WinPosition_Row::clear_values() {
  values_.Clear();
}
inline ::google::protobuf::int32 WinPosition_Row::values(int index) const {
  return values_.Get(index);
}
inline void WinPosition_Row::set_values(int index, ::google::protobuf::int32 value) {
  values_.Set(index, value);
}
inline void WinPosition_Row::add_values(::google::protobuf::int32 value) {
  values_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
WinPosition_Row::values() const {
  return values_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
WinPosition_Row::mutable_values() {
  return &values_;
}

// -------------------------------------------------------------------

// WinPosition

// repeated .wzq.WinPosition.Row matrix = 1;
inline int WinPosition::matrix_size() const {
  return matrix_.size();
}
inline void WinPosition::clear_matrix() {
  matrix_.Clear();
}
inline const ::wzq::WinPosition_Row& WinPosition::matrix(int index) const {
  return matrix_.Get(index);
}
inline ::wzq::WinPosition_Row* WinPosition::mutable_matrix(int index) {
  return matrix_.Mutable(index);
}
inline ::wzq::WinPosition_Row* WinPosition::add_matrix() {
  return matrix_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::wzq::WinPosition_Row >&
WinPosition::matrix() const {
  return matrix_;
}
inline ::google::protobuf::RepeatedPtrField< ::wzq::WinPosition_Row >*
WinPosition::mutable_matrix() {
  return &matrix_;
}

// -------------------------------------------------------------------

// GameOver

// optional .wzq.GameState state = 1;
inline bool GameOver::has_state() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameOver::set_has_state() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameOver::clear_has_state() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GameOver::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::wzq::GameState GameOver::state() const {
  return static_cast< ::wzq::GameState >(state_);
}
inline void GameOver::set_state(::wzq::GameState value) {
  assert(::wzq::GameState_IsValid(value));
  set_has_state();
  state_ = value;
}

// optional .wzq.WinPosition winposition = 2;
inline bool GameOver::has_winposition() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GameOver::set_has_winposition() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GameOver::clear_has_winposition() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GameOver::clear_winposition() {
  if (winposition_ != NULL) winposition_->::wzq::WinPosition::Clear();
  clear_has_winposition();
}
inline const ::wzq::WinPosition& GameOver::winposition() const {
  return winposition_ != NULL ? *winposition_ : *default_instance_->winposition_;
}
inline ::wzq::WinPosition* GameOver::mutable_winposition() {
  set_has_winposition();
  if (winposition_ == NULL) winposition_ = new ::wzq::WinPosition;
  return winposition_;
}
inline ::wzq::WinPosition* GameOver::release_winposition() {
  clear_has_winposition();
  ::wzq::WinPosition* temp = winposition_;
  winposition_ = NULL;
  return temp;
}
inline void GameOver::set_allocated_winposition(::wzq::WinPosition* winposition) {
  delete winposition_;
  winposition_ = winposition;
  if (winposition) {
    set_has_winposition();
  } else {
    clear_has_winposition();
  }
}

// -------------------------------------------------------------------

// NotifyLocalGameStart

// optional .wzq.ChessColorType chessColor = 1;
inline bool NotifyLocalGameStart::has_chesscolor() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NotifyLocalGameStart::set_has_chesscolor() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NotifyLocalGameStart::clear_has_chesscolor() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NotifyLocalGameStart::clear_chesscolor() {
  chesscolor_ = 0;
  clear_has_chesscolor();
}
inline ::wzq::ChessColorType NotifyLocalGameStart::chesscolor() const {
  return static_cast< ::wzq::ChessColorType >(chesscolor_);
}
inline void NotifyLocalGameStart::set_chesscolor(::wzq::ChessColorType value) {
  assert(::wzq::ChessColorType_IsValid(value));
  set_has_chesscolor();
  chesscolor_ = value;
}

// -------------------------------------------------------------------

// REQRegretChess

// optional int32 resultCode = 1;
inline bool REQRegretChess::has_resultcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void REQRegretChess::set_has_resultcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void REQRegretChess::clear_has_resultcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void REQRegretChess::clear_resultcode() {
  resultcode_ = 0;
  clear_has_resultcode();
}
inline ::google::protobuf::int32 REQRegretChess::resultcode() const {
  return resultcode_;
}
inline void REQRegretChess::set_resultcode(::google::protobuf::int32 value) {
  set_has_resultcode();
  resultcode_ = value;
}

// -------------------------------------------------------------------

// ACKRegretChess

// optional int32 resultCode = 1;
inline bool ACKRegretChess::has_resultcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ACKRegretChess::set_has_resultcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ACKRegretChess::clear_has_resultcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ACKRegretChess::clear_resultcode() {
  resultcode_ = 0;
  clear_has_resultcode();
}
inline ::google::protobuf::int32 ACKRegretChess::resultcode() const {
  return resultcode_;
}
inline void ACKRegretChess::set_resultcode(::google::protobuf::int32 value) {
  set_has_resultcode();
  resultcode_ = value;
}

// -------------------------------------------------------------------

// REQAgreeRegretChess

// optional int32 resultCode = 1;
inline bool REQAgreeRegretChess::has_resultcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void REQAgreeRegretChess::set_has_resultcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void REQAgreeRegretChess::clear_has_resultcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void REQAgreeRegretChess::clear_resultcode() {
  resultcode_ = 0;
  clear_has_resultcode();
}
inline ::google::protobuf::int32 REQAgreeRegretChess::resultcode() const {
  return resultcode_;
}
inline void REQAgreeRegretChess::set_resultcode(::google::protobuf::int32 value) {
  set_has_resultcode();
  resultcode_ = value;
}

// -------------------------------------------------------------------

// ACKAgreeRegretChess

// optional int32 resultCode = 1;
inline bool ACKAgreeRegretChess::has_resultcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ACKAgreeRegretChess::set_has_resultcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ACKAgreeRegretChess::clear_has_resultcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ACKAgreeRegretChess::clear_resultcode() {
  resultcode_ = 0;
  clear_has_resultcode();
}
inline ::google::protobuf::int32 ACKAgreeRegretChess::resultcode() const {
  return resultcode_;
}
inline void ACKAgreeRegretChess::set_resultcode(::google::protobuf::int32 value) {
  set_has_resultcode();
  resultcode_ = value;
}

// -------------------------------------------------------------------

// REQDisAgreeRegretChess

// optional int32 resultCode = 1;
inline bool REQDisAgreeRegretChess::has_resultcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void REQDisAgreeRegretChess::set_has_resultcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void REQDisAgreeRegretChess::clear_has_resultcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void REQDisAgreeRegretChess::clear_resultcode() {
  resultcode_ = 0;
  clear_has_resultcode();
}
inline ::google::protobuf::int32 REQDisAgreeRegretChess::resultcode() const {
  return resultcode_;
}
inline void REQDisAgreeRegretChess::set_resultcode(::google::protobuf::int32 value) {
  set_has_resultcode();
  resultcode_ = value;
}

// -------------------------------------------------------------------

// ACKDisAgreeRegretChess

// optional int32 resultCode = 1;
inline bool ACKDisAgreeRegretChess::has_resultcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ACKDisAgreeRegretChess::set_has_resultcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ACKDisAgreeRegretChess::clear_has_resultcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ACKDisAgreeRegretChess::clear_resultcode() {
  resultcode_ = 0;
  clear_has_resultcode();
}
inline ::google::protobuf::int32 ACKDisAgreeRegretChess::resultcode() const {
  return resultcode_;
}
inline void ACKDisAgreeRegretChess::set_resultcode(::google::protobuf::int32 value) {
  set_has_resultcode();
  resultcode_ = value;
}

// -------------------------------------------------------------------

// NotifyGiveUp

// -------------------------------------------------------------------

// NotifyPeaceChess

// -------------------------------------------------------------------

// NotifyASKPeaceChess

// -------------------------------------------------------------------

// NotifyAgreePeaceChess

// -------------------------------------------------------------------

// NotifyDisagreePeaceChess

// -------------------------------------------------------------------

// ACKAgreePeaceChess

// -------------------------------------------------------------------

// ACKDisagreePeaceChess

// -------------------------------------------------------------------

// ChessMove

// optional int32 x = 1;
inline bool ChessMove::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChessMove::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChessMove::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChessMove::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline ::google::protobuf::int32 ChessMove::x() const {
  return x_;
}
inline void ChessMove::set_x(::google::protobuf::int32 value) {
  set_has_x();
  x_ = value;
}

// optional int32 y = 2;
inline bool ChessMove::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChessMove::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChessMove::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChessMove::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline ::google::protobuf::int32 ChessMove::y() const {
  return y_;
}
inline void ChessMove::set_y(::google::protobuf::int32 value) {
  set_has_y();
  y_ = value;
}

// -------------------------------------------------------------------

// PlayingResult

// optional .wzq.GameState gameresult = 1;
inline bool PlayingResult::has_gameresult() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayingResult::set_has_gameresult() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayingResult::clear_has_gameresult() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayingResult::clear_gameresult() {
  gameresult_ = 0;
  clear_has_gameresult();
}
inline ::wzq::GameState PlayingResult::gameresult() const {
  return static_cast< ::wzq::GameState >(gameresult_);
}
inline void PlayingResult::set_gameresult(::wzq::GameState value) {
  assert(::wzq::GameState_IsValid(value));
  set_has_gameresult();
  gameresult_ = value;
}

// optional int64 winuserID = 2;
inline bool PlayingResult::has_winuserid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlayingResult::set_has_winuserid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlayingResult::clear_has_winuserid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlayingResult::clear_winuserid() {
  winuserid_ = GOOGLE_LONGLONG(0);
  clear_has_winuserid();
}
inline ::google::protobuf::int64 PlayingResult::winuserid() const {
  return winuserid_;
}
inline void PlayingResult::set_winuserid(::google::protobuf::int64 value) {
  set_has_winuserid();
  winuserid_ = value;
}

// optional int64 loseuserID = 3;
inline bool PlayingResult::has_loseuserid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PlayingResult::set_has_loseuserid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PlayingResult::clear_has_loseuserid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PlayingResult::clear_loseuserid() {
  loseuserid_ = GOOGLE_LONGLONG(0);
  clear_has_loseuserid();
}
inline ::google::protobuf::int64 PlayingResult::loseuserid() const {
  return loseuserid_;
}
inline void PlayingResult::set_loseuserid(::google::protobuf::int64 value) {
  set_has_loseuserid();
  loseuserid_ = value;
}

// optional .wzq.ChessColorType color = 4;
inline bool PlayingResult::has_color() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PlayingResult::set_has_color() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PlayingResult::clear_has_color() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PlayingResult::clear_color() {
  color_ = 0;
  clear_has_color();
}
inline ::wzq::ChessColorType PlayingResult::color() const {
  return static_cast< ::wzq::ChessColorType >(color_);
}
inline void PlayingResult::set_color(::wzq::ChessColorType value) {
  assert(::wzq::ChessColorType_IsValid(value));
  set_has_color();
  color_ = value;
}

// repeated .wzq.ChessMove moves = 5;
inline int PlayingResult::moves_size() const {
  return moves_.size();
}
inline void PlayingResult::clear_moves() {
  moves_.Clear();
}
inline const ::wzq::ChessMove& PlayingResult::moves(int index) const {
  return moves_.Get(index);
}
inline ::wzq::ChessMove* PlayingResult::mutable_moves(int index) {
  return moves_.Mutable(index);
}
inline ::wzq::ChessMove* PlayingResult::add_moves() {
  return moves_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::wzq::ChessMove >&
PlayingResult::moves() const {
  return moves_;
}
inline ::google::protobuf::RepeatedPtrField< ::wzq::ChessMove >*
PlayingResult::mutable_moves() {
  return &moves_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace wzq

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::wzq::GameState>() {
  return ::wzq::GameState_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::wzq::ChessColorType>() {
  return ::wzq::ChessColorType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::wzq::RoomType>() {
  return ::wzq::RoomType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_wzqGame_2eproto__INCLUDED
