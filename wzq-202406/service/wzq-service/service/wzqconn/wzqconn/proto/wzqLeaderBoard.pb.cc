// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: wzqLeaderBoard.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "wzqLeaderBoard.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* REQLeaderboard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  REQLeaderboard_reflection_ = NULL;
const ::google::protobuf::Descriptor* ACKLeaderboard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ACKLeaderboard_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpBoardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpBoardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* LeaderboardEntity_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LeaderboardEntity_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_wzqLeaderBoard_2eproto() {
  protobuf_AddDesc_wzqLeaderBoard_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "wzqLeaderBoard.proto");
  GOOGLE_CHECK(file != NULL);
  REQLeaderboard_descriptor_ = file->message_type(0);
  static const int REQLeaderboard_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQLeaderboard, uid_),
  };
  REQLeaderboard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      REQLeaderboard_descriptor_,
      REQLeaderboard::default_instance_,
      REQLeaderboard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQLeaderboard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQLeaderboard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(REQLeaderboard));
  ACKLeaderboard_descriptor_ = file->message_type(1);
  static const int ACKLeaderboard_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKLeaderboard, lbentities_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKLeaderboard, resultcode_),
  };
  ACKLeaderboard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ACKLeaderboard_descriptor_,
      ACKLeaderboard::default_instance_,
      ACKLeaderboard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKLeaderboard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKLeaderboard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ACKLeaderboard));
  UpBoardReq_descriptor_ = file->message_type(2);
  static const int UpBoardReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpBoardReq, lbentity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpBoardReq, boardkey_),
  };
  UpBoardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpBoardReq_descriptor_,
      UpBoardReq::default_instance_,
      UpBoardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpBoardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpBoardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpBoardReq));
  LeaderboardEntity_descriptor_ = file->message_type(3);
  static const int LeaderboardEntity_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaderboardEntity, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaderboardEntity, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaderboardEntity, personinfo_),
  };
  LeaderboardEntity_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LeaderboardEntity_descriptor_,
      LeaderboardEntity::default_instance_,
      LeaderboardEntity_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaderboardEntity, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaderboardEntity, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LeaderboardEntity));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_wzqLeaderBoard_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    REQLeaderboard_descriptor_, &REQLeaderboard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ACKLeaderboard_descriptor_, &ACKLeaderboard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpBoardReq_descriptor_, &UpBoardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LeaderboardEntity_descriptor_, &LeaderboardEntity::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_wzqLeaderBoard_2eproto() {
  delete REQLeaderboard::default_instance_;
  delete REQLeaderboard_reflection_;
  delete ACKLeaderboard::default_instance_;
  delete ACKLeaderboard_reflection_;
  delete UpBoardReq::default_instance_;
  delete UpBoardReq_reflection_;
  delete LeaderboardEntity::default_instance_;
  delete LeaderboardEntity_reflection_;
}

void protobuf_AddDesc_wzqLeaderBoard_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_wzqProtocol_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024wzqLeaderBoard.proto\032\021wzqProtocol.prot"
    "o\"\035\n\016REQLeaderboard\022\013\n\003uid\030\001 \001(\004\"L\n\016ACKL"
    "eaderboard\022&\n\nlbEntities\030\001 \003(\0132\022.Leaderb"
    "oardEntity\022\022\n\nresultCode\030\002 \001(\005\"D\n\nUpBoar"
    "dReq\022$\n\010lbEntity\030\001 \001(\0132\022.LeaderboardEnti"
    "ty\022\020\n\010boardKey\030\002 \001(\t\"R\n\021LeaderboardEntit"
    "y\022\014\n\004rank\030\001 \001(\005\022\r\n\005score\030\002 \001(\004\022 \n\nperson"
    "Info\030\003 \001(\0132\014.UserRawData", 304);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "wzqLeaderBoard.proto", &protobuf_RegisterTypes);
  REQLeaderboard::default_instance_ = new REQLeaderboard();
  ACKLeaderboard::default_instance_ = new ACKLeaderboard();
  UpBoardReq::default_instance_ = new UpBoardReq();
  LeaderboardEntity::default_instance_ = new LeaderboardEntity();
  REQLeaderboard::default_instance_->InitAsDefaultInstance();
  ACKLeaderboard::default_instance_->InitAsDefaultInstance();
  UpBoardReq::default_instance_->InitAsDefaultInstance();
  LeaderboardEntity::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_wzqLeaderBoard_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_wzqLeaderBoard_2eproto {
  StaticDescriptorInitializer_wzqLeaderBoard_2eproto() {
    protobuf_AddDesc_wzqLeaderBoard_2eproto();
  }
} static_descriptor_initializer_wzqLeaderBoard_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int REQLeaderboard::kUidFieldNumber;
#endif  // !_MSC_VER

REQLeaderboard::REQLeaderboard()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void REQLeaderboard::InitAsDefaultInstance() {
}

REQLeaderboard::REQLeaderboard(const REQLeaderboard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void REQLeaderboard::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

REQLeaderboard::~REQLeaderboard() {
  SharedDtor();
}

void REQLeaderboard::SharedDtor() {
  if (this != default_instance_) {
  }
}

void REQLeaderboard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* REQLeaderboard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return REQLeaderboard_descriptor_;
}

const REQLeaderboard& REQLeaderboard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wzqLeaderBoard_2eproto();
  return *default_instance_;
}

REQLeaderboard* REQLeaderboard::default_instance_ = NULL;

REQLeaderboard* REQLeaderboard::New() const {
  return new REQLeaderboard;
}

void REQLeaderboard::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool REQLeaderboard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void REQLeaderboard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* REQLeaderboard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int REQLeaderboard::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void REQLeaderboard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const REQLeaderboard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const REQLeaderboard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void REQLeaderboard::MergeFrom(const REQLeaderboard& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void REQLeaderboard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void REQLeaderboard::CopyFrom(const REQLeaderboard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool REQLeaderboard::IsInitialized() const {

  return true;
}

void REQLeaderboard::Swap(REQLeaderboard* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata REQLeaderboard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = REQLeaderboard_descriptor_;
  metadata.reflection = REQLeaderboard_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ACKLeaderboard::kLbEntitiesFieldNumber;
const int ACKLeaderboard::kResultCodeFieldNumber;
#endif  // !_MSC_VER

ACKLeaderboard::ACKLeaderboard()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ACKLeaderboard::InitAsDefaultInstance() {
}

ACKLeaderboard::ACKLeaderboard(const ACKLeaderboard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ACKLeaderboard::SharedCtor() {
  _cached_size_ = 0;
  resultcode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ACKLeaderboard::~ACKLeaderboard() {
  SharedDtor();
}

void ACKLeaderboard::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ACKLeaderboard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ACKLeaderboard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ACKLeaderboard_descriptor_;
}

const ACKLeaderboard& ACKLeaderboard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wzqLeaderBoard_2eproto();
  return *default_instance_;
}

ACKLeaderboard* ACKLeaderboard::default_instance_ = NULL;

ACKLeaderboard* ACKLeaderboard::New() const {
  return new ACKLeaderboard;
}

void ACKLeaderboard::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    resultcode_ = 0;
  }
  lbentities_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ACKLeaderboard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .LeaderboardEntity lbEntities = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lbEntities:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_lbentities()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_lbEntities;
        if (input->ExpectTag(16)) goto parse_resultCode;
        break;
      }

      // optional int32 resultCode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_resultCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &resultcode_)));
          set_has_resultcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ACKLeaderboard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .LeaderboardEntity lbEntities = 1;
  for (int i = 0; i < this->lbentities_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->lbentities(i), output);
  }

  // optional int32 resultCode = 2;
  if (has_resultcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->resultcode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ACKLeaderboard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .LeaderboardEntity lbEntities = 1;
  for (int i = 0; i < this->lbentities_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->lbentities(i), target);
  }

  // optional int32 resultCode = 2;
  if (has_resultcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->resultcode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ACKLeaderboard::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 resultCode = 2;
    if (has_resultcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->resultcode());
    }

  }
  // repeated .LeaderboardEntity lbEntities = 1;
  total_size += 1 * this->lbentities_size();
  for (int i = 0; i < this->lbentities_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->lbentities(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ACKLeaderboard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ACKLeaderboard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ACKLeaderboard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ACKLeaderboard::MergeFrom(const ACKLeaderboard& from) {
  GOOGLE_CHECK_NE(&from, this);
  lbentities_.MergeFrom(from.lbentities_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_resultcode()) {
      set_resultcode(from.resultcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ACKLeaderboard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ACKLeaderboard::CopyFrom(const ACKLeaderboard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ACKLeaderboard::IsInitialized() const {

  return true;
}

void ACKLeaderboard::Swap(ACKLeaderboard* other) {
  if (other != this) {
    lbentities_.Swap(&other->lbentities_);
    std::swap(resultcode_, other->resultcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ACKLeaderboard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ACKLeaderboard_descriptor_;
  metadata.reflection = ACKLeaderboard_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpBoardReq::kLbEntityFieldNumber;
const int UpBoardReq::kBoardKeyFieldNumber;
#endif  // !_MSC_VER

UpBoardReq::UpBoardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpBoardReq::InitAsDefaultInstance() {
  lbentity_ = const_cast< ::LeaderboardEntity*>(&::LeaderboardEntity::default_instance());
}

UpBoardReq::UpBoardReq(const UpBoardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpBoardReq::SharedCtor() {
  _cached_size_ = 0;
  lbentity_ = NULL;
  boardkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpBoardReq::~UpBoardReq() {
  SharedDtor();
}

void UpBoardReq::SharedDtor() {
  if (boardkey_ != &::google::protobuf::internal::kEmptyString) {
    delete boardkey_;
  }
  if (this != default_instance_) {
    delete lbentity_;
  }
}

void UpBoardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpBoardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpBoardReq_descriptor_;
}

const UpBoardReq& UpBoardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wzqLeaderBoard_2eproto();
  return *default_instance_;
}

UpBoardReq* UpBoardReq::default_instance_ = NULL;

UpBoardReq* UpBoardReq::New() const {
  return new UpBoardReq;
}

void UpBoardReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_lbentity()) {
      if (lbentity_ != NULL) lbentity_->::LeaderboardEntity::Clear();
    }
    if (has_boardkey()) {
      if (boardkey_ != &::google::protobuf::internal::kEmptyString) {
        boardkey_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpBoardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .LeaderboardEntity lbEntity = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lbentity()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_boardKey;
        break;
      }

      // optional string boardKey = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_boardKey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_boardkey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->boardkey().data(), this->boardkey().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpBoardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .LeaderboardEntity lbEntity = 1;
  if (has_lbentity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->lbentity(), output);
  }

  // optional string boardKey = 2;
  if (has_boardkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->boardkey().data(), this->boardkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->boardkey(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpBoardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .LeaderboardEntity lbEntity = 1;
  if (has_lbentity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->lbentity(), target);
  }

  // optional string boardKey = 2;
  if (has_boardkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->boardkey().data(), this->boardkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->boardkey(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpBoardReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .LeaderboardEntity lbEntity = 1;
    if (has_lbentity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lbentity());
    }

    // optional string boardKey = 2;
    if (has_boardkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->boardkey());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpBoardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpBoardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpBoardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpBoardReq::MergeFrom(const UpBoardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lbentity()) {
      mutable_lbentity()->::LeaderboardEntity::MergeFrom(from.lbentity());
    }
    if (from.has_boardkey()) {
      set_boardkey(from.boardkey());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpBoardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpBoardReq::CopyFrom(const UpBoardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpBoardReq::IsInitialized() const {

  return true;
}

void UpBoardReq::Swap(UpBoardReq* other) {
  if (other != this) {
    std::swap(lbentity_, other->lbentity_);
    std::swap(boardkey_, other->boardkey_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpBoardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpBoardReq_descriptor_;
  metadata.reflection = UpBoardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LeaderboardEntity::kRankFieldNumber;
const int LeaderboardEntity::kScoreFieldNumber;
const int LeaderboardEntity::kPersonInfoFieldNumber;
#endif  // !_MSC_VER

LeaderboardEntity::LeaderboardEntity()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LeaderboardEntity::InitAsDefaultInstance() {
  personinfo_ = const_cast< ::UserRawData*>(&::UserRawData::default_instance());
}

LeaderboardEntity::LeaderboardEntity(const LeaderboardEntity& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LeaderboardEntity::SharedCtor() {
  _cached_size_ = 0;
  rank_ = 0;
  score_ = GOOGLE_ULONGLONG(0);
  personinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LeaderboardEntity::~LeaderboardEntity() {
  SharedDtor();
}

void LeaderboardEntity::SharedDtor() {
  if (this != default_instance_) {
    delete personinfo_;
  }
}

void LeaderboardEntity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LeaderboardEntity::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LeaderboardEntity_descriptor_;
}

const LeaderboardEntity& LeaderboardEntity::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wzqLeaderBoard_2eproto();
  return *default_instance_;
}

LeaderboardEntity* LeaderboardEntity::default_instance_ = NULL;

LeaderboardEntity* LeaderboardEntity::New() const {
  return new LeaderboardEntity;
}

void LeaderboardEntity::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rank_ = 0;
    score_ = GOOGLE_ULONGLONG(0);
    if (has_personinfo()) {
      if (personinfo_ != NULL) personinfo_->::UserRawData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LeaderboardEntity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 rank = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_score;
        break;
      }

      // optional uint64 score = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_personInfo;
        break;
      }

      // optional .UserRawData personInfo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_personInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_personinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LeaderboardEntity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 rank = 1;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rank(), output);
  }

  // optional uint64 score = 2;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->score(), output);
  }

  // optional .UserRawData personInfo = 3;
  if (has_personinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->personinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LeaderboardEntity::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 rank = 1;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rank(), target);
  }

  // optional uint64 score = 2;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->score(), target);
  }

  // optional .UserRawData personInfo = 3;
  if (has_personinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->personinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LeaderboardEntity::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 rank = 1;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }

    // optional uint64 score = 2;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->score());
    }

    // optional .UserRawData personInfo = 3;
    if (has_personinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->personinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LeaderboardEntity::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LeaderboardEntity* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LeaderboardEntity*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LeaderboardEntity::MergeFrom(const LeaderboardEntity& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_personinfo()) {
      mutable_personinfo()->::UserRawData::MergeFrom(from.personinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LeaderboardEntity::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LeaderboardEntity::CopyFrom(const LeaderboardEntity& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaderboardEntity::IsInitialized() const {

  return true;
}

void LeaderboardEntity::Swap(LeaderboardEntity* other) {
  if (other != this) {
    std::swap(rank_, other->rank_);
    std::swap(score_, other->score_);
    std::swap(personinfo_, other->personinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LeaderboardEntity::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LeaderboardEntity_descriptor_;
  metadata.reflection = LeaderboardEntity_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
