// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: wzqProtocol.proto

#ifndef PROTOBUF_wzqProtocol_2eproto__INCLUDED
#define PROTOBUF_wzqProtocol_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_wzqProtocol_2eproto();
void protobuf_AssignDesc_wzqProtocol_2eproto();
void protobuf_ShutdownFile_wzqProtocol_2eproto();

class REQHold;
class ACKHold;
class MsgPackage;
class UserRawData;
class GameRecord;
class REQRegister;
class ACKRegister;
class REQUserRegister;
class ACKUserRegister;
class REQUserPWDLogin;
class ACKUserPWDLogin;
class REQUserTokenLogin;
class ACKUserTokenLogin;
class REQSendVerifyCode;
class ACKSendVerifyCode;
class REQPhoneNumberLogin;
class ACKPhoneNumberLogin;
class REQChangeName;
class ACKChangeName;

enum LoginType {
  LT_UnKnown = 0,
  LT_PWD = 1,
  LT_MOBILE = 2
};
bool LoginType_IsValid(int value);
const LoginType LoginType_MIN = LT_UnKnown;
const LoginType LoginType_MAX = LT_MOBILE;
const int LoginType_ARRAYSIZE = LoginType_MAX + 1;

const ::google::protobuf::EnumDescriptor* LoginType_descriptor();
inline const ::std::string& LoginType_Name(LoginType value) {
  return ::google::protobuf::internal::NameOfEnum(
    LoginType_descriptor(), value);
}
inline bool LoginType_Parse(
    const ::std::string& name, LoginType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LoginType>(
    LoginType_descriptor(), name, value);
}
// ===================================================================

class REQHold : public ::google::protobuf::Message {
 public:
  REQHold();
  virtual ~REQHold();

  REQHold(const REQHold& from);

  inline REQHold& operator=(const REQHold& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const REQHold& default_instance();

  void Swap(REQHold* other);

  // implements Message ----------------------------------------------

  REQHold* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const REQHold& from);
  void MergeFrom(const REQHold& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:REQHold)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_wzqProtocol_2eproto();
  friend void protobuf_AssignDesc_wzqProtocol_2eproto();
  friend void protobuf_ShutdownFile_wzqProtocol_2eproto();

  void InitAsDefaultInstance();
  static REQHold* default_instance_;
};
// -------------------------------------------------------------------

class ACKHold : public ::google::protobuf::Message {
 public:
  ACKHold();
  virtual ~ACKHold();

  ACKHold(const ACKHold& from);

  inline ACKHold& operator=(const ACKHold& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ACKHold& default_instance();

  void Swap(ACKHold* other);

  // implements Message ----------------------------------------------

  ACKHold* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ACKHold& from);
  void MergeFrom(const ACKHold& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 result_id = 1;
  inline bool has_result_id() const;
  inline void clear_result_id();
  static const int kResultIdFieldNumber = 1;
  inline ::google::protobuf::int32 result_id() const;
  inline void set_result_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ACKHold)
 private:
  inline void set_has_result_id();
  inline void clear_has_result_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 result_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_wzqProtocol_2eproto();
  friend void protobuf_AssignDesc_wzqProtocol_2eproto();
  friend void protobuf_ShutdownFile_wzqProtocol_2eproto();

  void InitAsDefaultInstance();
  static ACKHold* default_instance_;
};
// -------------------------------------------------------------------

class MsgPackage : public ::google::protobuf::Message {
 public:
  MsgPackage();
  virtual ~MsgPackage();

  MsgPackage(const MsgPackage& from);

  inline MsgPackage& operator=(const MsgPackage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgPackage& default_instance();

  void Swap(MsgPackage* other);

  // implements Message ----------------------------------------------

  MsgPackage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgPackage& from);
  void MergeFrom(const MsgPackage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 msg_id = 1;
  inline bool has_msg_id() const;
  inline void clear_msg_id();
  static const int kMsgIdFieldNumber = 1;
  inline ::google::protobuf::int64 msg_id() const;
  inline void set_msg_id(::google::protobuf::int64 value);

  // optional int64 seq_id = 2;
  inline bool has_seq_id() const;
  inline void clear_seq_id();
  static const int kSeqIdFieldNumber = 2;
  inline ::google::protobuf::int64 seq_id() const;
  inline void set_seq_id(::google::protobuf::int64 value);

  // optional int64 user_id = 3;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 3;
  inline ::google::protobuf::int64 user_id() const;
  inline void set_user_id(::google::protobuf::int64 value);

  // optional bytes msg = 4;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 4;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const void* value, size_t size);
  inline ::std::string* mutable_msg();
  inline ::std::string* release_msg();
  inline void set_allocated_msg(::std::string* msg);

  // optional bytes src = 5;
  inline bool has_src() const;
  inline void clear_src();
  static const int kSrcFieldNumber = 5;
  inline const ::std::string& src() const;
  inline void set_src(const ::std::string& value);
  inline void set_src(const char* value);
  inline void set_src(const void* value, size_t size);
  inline ::std::string* mutable_src();
  inline ::std::string* release_src();
  inline void set_allocated_src(::std::string* src);

  // optional int64 clientid = 6;
  inline bool has_clientid() const;
  inline void clear_clientid();
  static const int kClientidFieldNumber = 6;
  inline ::google::protobuf::int64 clientid() const;
  inline void set_clientid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:MsgPackage)
 private:
  inline void set_has_msg_id();
  inline void clear_has_msg_id();
  inline void set_has_seq_id();
  inline void clear_has_seq_id();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_msg();
  inline void clear_has_msg();
  inline void set_has_src();
  inline void clear_has_src();
  inline void set_has_clientid();
  inline void clear_has_clientid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 msg_id_;
  ::google::protobuf::int64 seq_id_;
  ::google::protobuf::int64 user_id_;
  ::std::string* msg_;
  ::std::string* src_;
  ::google::protobuf::int64 clientid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_wzqProtocol_2eproto();
  friend void protobuf_AssignDesc_wzqProtocol_2eproto();
  friend void protobuf_ShutdownFile_wzqProtocol_2eproto();

  void InitAsDefaultInstance();
  static MsgPackage* default_instance_;
};
// -------------------------------------------------------------------

class UserRawData : public ::google::protobuf::Message {
 public:
  UserRawData();
  virtual ~UserRawData();

  UserRawData(const UserRawData& from);

  inline UserRawData& operator=(const UserRawData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserRawData& default_instance();

  void Swap(UserRawData* other);

  // implements Message ----------------------------------------------

  UserRawData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserRawData& from);
  void MergeFrom(const UserRawData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 userID = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUserIDFieldNumber = 1;
  inline ::google::protobuf::int64 userid() const;
  inline void set_userid(::google::protobuf::int64 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string avatar = 3;
  inline bool has_avatar() const;
  inline void clear_avatar();
  static const int kAvatarFieldNumber = 3;
  inline const ::std::string& avatar() const;
  inline void set_avatar(const ::std::string& value);
  inline void set_avatar(const char* value);
  inline void set_avatar(const char* value, size_t size);
  inline ::std::string* mutable_avatar();
  inline ::std::string* release_avatar();
  inline void set_allocated_avatar(::std::string* avatar);

  // optional string displayID = 4;
  inline bool has_displayid() const;
  inline void clear_displayid();
  static const int kDisplayIDFieldNumber = 4;
  inline const ::std::string& displayid() const;
  inline void set_displayid(const ::std::string& value);
  inline void set_displayid(const char* value);
  inline void set_displayid(const char* value, size_t size);
  inline ::std::string* mutable_displayid();
  inline ::std::string* release_displayid();
  inline void set_allocated_displayid(::std::string* displayid);

  // optional int32 score = 5;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 5;
  inline ::google::protobuf::int32 score() const;
  inline void set_score(::google::protobuf::int32 value);

  // optional int32 highestScore = 6;
  inline bool has_highestscore() const;
  inline void clear_highestscore();
  static const int kHighestScoreFieldNumber = 6;
  inline ::google::protobuf::int32 highestscore() const;
  inline void set_highestscore(::google::protobuf::int32 value);

  // optional .GameRecord gameRecord = 7;
  inline bool has_gamerecord() const;
  inline void clear_gamerecord();
  static const int kGameRecordFieldNumber = 7;
  inline const ::GameRecord& gamerecord() const;
  inline ::GameRecord* mutable_gamerecord();
  inline ::GameRecord* release_gamerecord();
  inline void set_allocated_gamerecord(::GameRecord* gamerecord);

  // @@protoc_insertion_point(class_scope:UserRawData)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_avatar();
  inline void clear_has_avatar();
  inline void set_has_displayid();
  inline void clear_has_displayid();
  inline void set_has_score();
  inline void clear_has_score();
  inline void set_has_highestscore();
  inline void clear_has_highestscore();
  inline void set_has_gamerecord();
  inline void clear_has_gamerecord();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 userid_;
  ::std::string* name_;
  ::std::string* avatar_;
  ::std::string* displayid_;
  ::google::protobuf::int32 score_;
  ::google::protobuf::int32 highestscore_;
  ::GameRecord* gamerecord_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_wzqProtocol_2eproto();
  friend void protobuf_AssignDesc_wzqProtocol_2eproto();
  friend void protobuf_ShutdownFile_wzqProtocol_2eproto();

  void InitAsDefaultInstance();
  static UserRawData* default_instance_;
};
// -------------------------------------------------------------------

class GameRecord : public ::google::protobuf::Message {
 public:
  GameRecord();
  virtual ~GameRecord();

  GameRecord(const GameRecord& from);

  inline GameRecord& operator=(const GameRecord& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameRecord& default_instance();

  void Swap(GameRecord* other);

  // implements Message ----------------------------------------------

  GameRecord* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GameRecord& from);
  void MergeFrom(const GameRecord& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 totalCount = 1;
  inline bool has_totalcount() const;
  inline void clear_totalcount();
  static const int kTotalCountFieldNumber = 1;
  inline ::google::protobuf::int32 totalcount() const;
  inline void set_totalcount(::google::protobuf::int32 value);

  // optional int32 winCount = 2;
  inline bool has_wincount() const;
  inline void clear_wincount();
  static const int kWinCountFieldNumber = 2;
  inline ::google::protobuf::int32 wincount() const;
  inline void set_wincount(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GameRecord)
 private:
  inline void set_has_totalcount();
  inline void clear_has_totalcount();
  inline void set_has_wincount();
  inline void clear_has_wincount();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 totalcount_;
  ::google::protobuf::int32 wincount_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_wzqProtocol_2eproto();
  friend void protobuf_AssignDesc_wzqProtocol_2eproto();
  friend void protobuf_ShutdownFile_wzqProtocol_2eproto();

  void InitAsDefaultInstance();
  static GameRecord* default_instance_;
};
// -------------------------------------------------------------------

class REQRegister : public ::google::protobuf::Message {
 public:
  REQRegister();
  virtual ~REQRegister();

  REQRegister(const REQRegister& from);

  inline REQRegister& operator=(const REQRegister& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const REQRegister& default_instance();

  void Swap(REQRegister* other);

  // implements Message ----------------------------------------------

  REQRegister* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const REQRegister& from);
  void MergeFrom(const REQRegister& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes account = 1;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 1;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const void* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // optional bytes passwd = 2;
  inline bool has_passwd() const;
  inline void clear_passwd();
  static const int kPasswdFieldNumber = 2;
  inline const ::std::string& passwd() const;
  inline void set_passwd(const ::std::string& value);
  inline void set_passwd(const char* value);
  inline void set_passwd(const void* value, size_t size);
  inline ::std::string* mutable_passwd();
  inline ::std::string* release_passwd();
  inline void set_allocated_passwd(::std::string* passwd);

  // @@protoc_insertion_point(class_scope:REQRegister)
 private:
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_passwd();
  inline void clear_has_passwd();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* account_;
  ::std::string* passwd_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_wzqProtocol_2eproto();
  friend void protobuf_AssignDesc_wzqProtocol_2eproto();
  friend void protobuf_ShutdownFile_wzqProtocol_2eproto();

  void InitAsDefaultInstance();
  static REQRegister* default_instance_;
};
// -------------------------------------------------------------------

class ACKRegister : public ::google::protobuf::Message {
 public:
  ACKRegister();
  virtual ~ACKRegister();

  ACKRegister(const ACKRegister& from);

  inline ACKRegister& operator=(const ACKRegister& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ACKRegister& default_instance();

  void Swap(ACKRegister* other);

  // implements Message ----------------------------------------------

  ACKRegister* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ACKRegister& from);
  void MergeFrom(const ACKRegister& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 code = 1;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 1;
  inline ::google::protobuf::int32 code() const;
  inline void set_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ACKRegister)
 private:
  inline void set_has_code();
  inline void clear_has_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_wzqProtocol_2eproto();
  friend void protobuf_AssignDesc_wzqProtocol_2eproto();
  friend void protobuf_ShutdownFile_wzqProtocol_2eproto();

  void InitAsDefaultInstance();
  static ACKRegister* default_instance_;
};
// -------------------------------------------------------------------

class REQUserRegister : public ::google::protobuf::Message {
 public:
  REQUserRegister();
  virtual ~REQUserRegister();

  REQUserRegister(const REQUserRegister& from);

  inline REQUserRegister& operator=(const REQUserRegister& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const REQUserRegister& default_instance();

  void Swap(REQUserRegister* other);

  // implements Message ----------------------------------------------

  REQUserRegister* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const REQUserRegister& from);
  void MergeFrom(const REQUserRegister& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes userName = 1;
  inline bool has_username() const;
  inline void clear_username();
  static const int kUserNameFieldNumber = 1;
  inline const ::std::string& username() const;
  inline void set_username(const ::std::string& value);
  inline void set_username(const char* value);
  inline void set_username(const void* value, size_t size);
  inline ::std::string* mutable_username();
  inline ::std::string* release_username();
  inline void set_allocated_username(::std::string* username);

  // required bytes userPassword = 2;
  inline bool has_userpassword() const;
  inline void clear_userpassword();
  static const int kUserPasswordFieldNumber = 2;
  inline const ::std::string& userpassword() const;
  inline void set_userpassword(const ::std::string& value);
  inline void set_userpassword(const char* value);
  inline void set_userpassword(const void* value, size_t size);
  inline ::std::string* mutable_userpassword();
  inline ::std::string* release_userpassword();
  inline void set_allocated_userpassword(::std::string* userpassword);

  // @@protoc_insertion_point(class_scope:REQUserRegister)
 private:
  inline void set_has_username();
  inline void clear_has_username();
  inline void set_has_userpassword();
  inline void clear_has_userpassword();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* username_;
  ::std::string* userpassword_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_wzqProtocol_2eproto();
  friend void protobuf_AssignDesc_wzqProtocol_2eproto();
  friend void protobuf_ShutdownFile_wzqProtocol_2eproto();

  void InitAsDefaultInstance();
  static REQUserRegister* default_instance_;
};
// -------------------------------------------------------------------

class ACKUserRegister : public ::google::protobuf::Message {
 public:
  ACKUserRegister();
  virtual ~ACKUserRegister();

  ACKUserRegister(const ACKUserRegister& from);

  inline ACKUserRegister& operator=(const ACKUserRegister& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ACKUserRegister& default_instance();

  void Swap(ACKUserRegister* other);

  // implements Message ----------------------------------------------

  ACKUserRegister* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ACKUserRegister& from);
  void MergeFrom(const ACKUserRegister& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 result_id = 1 [default = 0];
  inline bool has_result_id() const;
  inline void clear_result_id();
  static const int kResultIdFieldNumber = 1;
  inline ::google::protobuf::int32 result_id() const;
  inline void set_result_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ACKUserRegister)
 private:
  inline void set_has_result_id();
  inline void clear_has_result_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 result_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_wzqProtocol_2eproto();
  friend void protobuf_AssignDesc_wzqProtocol_2eproto();
  friend void protobuf_ShutdownFile_wzqProtocol_2eproto();

  void InitAsDefaultInstance();
  static ACKUserRegister* default_instance_;
};
// -------------------------------------------------------------------

class REQUserPWDLogin : public ::google::protobuf::Message {
 public:
  REQUserPWDLogin();
  virtual ~REQUserPWDLogin();

  REQUserPWDLogin(const REQUserPWDLogin& from);

  inline REQUserPWDLogin& operator=(const REQUserPWDLogin& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const REQUserPWDLogin& default_instance();

  void Swap(REQUserPWDLogin* other);

  // implements Message ----------------------------------------------

  REQUserPWDLogin* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const REQUserPWDLogin& from);
  void MergeFrom(const REQUserPWDLogin& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes userName = 1;
  inline bool has_username() const;
  inline void clear_username();
  static const int kUserNameFieldNumber = 1;
  inline const ::std::string& username() const;
  inline void set_username(const ::std::string& value);
  inline void set_username(const char* value);
  inline void set_username(const void* value, size_t size);
  inline ::std::string* mutable_username();
  inline ::std::string* release_username();
  inline void set_allocated_username(::std::string* username);

  // required bytes userPassword = 2;
  inline bool has_userpassword() const;
  inline void clear_userpassword();
  static const int kUserPasswordFieldNumber = 2;
  inline const ::std::string& userpassword() const;
  inline void set_userpassword(const ::std::string& value);
  inline void set_userpassword(const char* value);
  inline void set_userpassword(const void* value, size_t size);
  inline ::std::string* mutable_userpassword();
  inline ::std::string* release_userpassword();
  inline void set_allocated_userpassword(::std::string* userpassword);

  // @@protoc_insertion_point(class_scope:REQUserPWDLogin)
 private:
  inline void set_has_username();
  inline void clear_has_username();
  inline void set_has_userpassword();
  inline void clear_has_userpassword();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* username_;
  ::std::string* userpassword_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_wzqProtocol_2eproto();
  friend void protobuf_AssignDesc_wzqProtocol_2eproto();
  friend void protobuf_ShutdownFile_wzqProtocol_2eproto();

  void InitAsDefaultInstance();
  static REQUserPWDLogin* default_instance_;
};
// -------------------------------------------------------------------

class ACKUserPWDLogin : public ::google::protobuf::Message {
 public:
  ACKUserPWDLogin();
  virtual ~ACKUserPWDLogin();

  ACKUserPWDLogin(const ACKUserPWDLogin& from);

  inline ACKUserPWDLogin& operator=(const ACKUserPWDLogin& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ACKUserPWDLogin& default_instance();

  void Swap(ACKUserPWDLogin* other);

  // implements Message ----------------------------------------------

  ACKUserPWDLogin* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ACKUserPWDLogin& from);
  void MergeFrom(const ACKUserPWDLogin& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 result_id = 1 [default = 0];
  inline bool has_result_id() const;
  inline void clear_result_id();
  static const int kResultIdFieldNumber = 1;
  inline ::google::protobuf::int32 result_id() const;
  inline void set_result_id(::google::protobuf::int32 value);

  // optional bytes token = 2;
  inline bool has_token() const;
  inline void clear_token();
  static const int kTokenFieldNumber = 2;
  inline const ::std::string& token() const;
  inline void set_token(const ::std::string& value);
  inline void set_token(const char* value);
  inline void set_token(const void* value, size_t size);
  inline ::std::string* mutable_token();
  inline ::std::string* release_token();
  inline void set_allocated_token(::std::string* token);

  // optional .UserRawData baseInfo = 3;
  inline bool has_baseinfo() const;
  inline void clear_baseinfo();
  static const int kBaseInfoFieldNumber = 3;
  inline const ::UserRawData& baseinfo() const;
  inline ::UserRawData* mutable_baseinfo();
  inline ::UserRawData* release_baseinfo();
  inline void set_allocated_baseinfo(::UserRawData* baseinfo);

  // @@protoc_insertion_point(class_scope:ACKUserPWDLogin)
 private:
  inline void set_has_result_id();
  inline void clear_has_result_id();
  inline void set_has_token();
  inline void clear_has_token();
  inline void set_has_baseinfo();
  inline void clear_has_baseinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* token_;
  ::UserRawData* baseinfo_;
  ::google::protobuf::int32 result_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_wzqProtocol_2eproto();
  friend void protobuf_AssignDesc_wzqProtocol_2eproto();
  friend void protobuf_ShutdownFile_wzqProtocol_2eproto();

  void InitAsDefaultInstance();
  static ACKUserPWDLogin* default_instance_;
};
// -------------------------------------------------------------------

class REQUserTokenLogin : public ::google::protobuf::Message {
 public:
  REQUserTokenLogin();
  virtual ~REQUserTokenLogin();

  REQUserTokenLogin(const REQUserTokenLogin& from);

  inline REQUserTokenLogin& operator=(const REQUserTokenLogin& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const REQUserTokenLogin& default_instance();

  void Swap(REQUserTokenLogin* other);

  // implements Message ----------------------------------------------

  REQUserTokenLogin* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const REQUserTokenLogin& from);
  void MergeFrom(const REQUserTokenLogin& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes token = 1;
  inline bool has_token() const;
  inline void clear_token();
  static const int kTokenFieldNumber = 1;
  inline const ::std::string& token() const;
  inline void set_token(const ::std::string& value);
  inline void set_token(const char* value);
  inline void set_token(const void* value, size_t size);
  inline ::std::string* mutable_token();
  inline ::std::string* release_token();
  inline void set_allocated_token(::std::string* token);

  // @@protoc_insertion_point(class_scope:REQUserTokenLogin)
 private:
  inline void set_has_token();
  inline void clear_has_token();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* token_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_wzqProtocol_2eproto();
  friend void protobuf_AssignDesc_wzqProtocol_2eproto();
  friend void protobuf_ShutdownFile_wzqProtocol_2eproto();

  void InitAsDefaultInstance();
  static REQUserTokenLogin* default_instance_;
};
// -------------------------------------------------------------------

class ACKUserTokenLogin : public ::google::protobuf::Message {
 public:
  ACKUserTokenLogin();
  virtual ~ACKUserTokenLogin();

  ACKUserTokenLogin(const ACKUserTokenLogin& from);

  inline ACKUserTokenLogin& operator=(const ACKUserTokenLogin& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ACKUserTokenLogin& default_instance();

  void Swap(ACKUserTokenLogin* other);

  // implements Message ----------------------------------------------

  ACKUserTokenLogin* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ACKUserTokenLogin& from);
  void MergeFrom(const ACKUserTokenLogin& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 resultCode = 1;
  inline bool has_resultcode() const;
  inline void clear_resultcode();
  static const int kResultCodeFieldNumber = 1;
  inline ::google::protobuf::int32 resultcode() const;
  inline void set_resultcode(::google::protobuf::int32 value);

  // optional .UserRawData baseInfo = 2;
  inline bool has_baseinfo() const;
  inline void clear_baseinfo();
  static const int kBaseInfoFieldNumber = 2;
  inline const ::UserRawData& baseinfo() const;
  inline ::UserRawData* mutable_baseinfo();
  inline ::UserRawData* release_baseinfo();
  inline void set_allocated_baseinfo(::UserRawData* baseinfo);

  // @@protoc_insertion_point(class_scope:ACKUserTokenLogin)
 private:
  inline void set_has_resultcode();
  inline void clear_has_resultcode();
  inline void set_has_baseinfo();
  inline void clear_has_baseinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::UserRawData* baseinfo_;
  ::google::protobuf::int32 resultcode_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_wzqProtocol_2eproto();
  friend void protobuf_AssignDesc_wzqProtocol_2eproto();
  friend void protobuf_ShutdownFile_wzqProtocol_2eproto();

  void InitAsDefaultInstance();
  static ACKUserTokenLogin* default_instance_;
};
// -------------------------------------------------------------------

class REQSendVerifyCode : public ::google::protobuf::Message {
 public:
  REQSendVerifyCode();
  virtual ~REQSendVerifyCode();

  REQSendVerifyCode(const REQSendVerifyCode& from);

  inline REQSendVerifyCode& operator=(const REQSendVerifyCode& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const REQSendVerifyCode& default_instance();

  void Swap(REQSendVerifyCode* other);

  // implements Message ----------------------------------------------

  REQSendVerifyCode* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const REQSendVerifyCode& from);
  void MergeFrom(const REQSendVerifyCode& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes phoneNumber = 1;
  inline bool has_phonenumber() const;
  inline void clear_phonenumber();
  static const int kPhoneNumberFieldNumber = 1;
  inline const ::std::string& phonenumber() const;
  inline void set_phonenumber(const ::std::string& value);
  inline void set_phonenumber(const char* value);
  inline void set_phonenumber(const void* value, size_t size);
  inline ::std::string* mutable_phonenumber();
  inline ::std::string* release_phonenumber();
  inline void set_allocated_phonenumber(::std::string* phonenumber);

  // @@protoc_insertion_point(class_scope:REQSendVerifyCode)
 private:
  inline void set_has_phonenumber();
  inline void clear_has_phonenumber();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* phonenumber_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_wzqProtocol_2eproto();
  friend void protobuf_AssignDesc_wzqProtocol_2eproto();
  friend void protobuf_ShutdownFile_wzqProtocol_2eproto();

  void InitAsDefaultInstance();
  static REQSendVerifyCode* default_instance_;
};
// -------------------------------------------------------------------

class ACKSendVerifyCode : public ::google::protobuf::Message {
 public:
  ACKSendVerifyCode();
  virtual ~ACKSendVerifyCode();

  ACKSendVerifyCode(const ACKSendVerifyCode& from);

  inline ACKSendVerifyCode& operator=(const ACKSendVerifyCode& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ACKSendVerifyCode& default_instance();

  void Swap(ACKSendVerifyCode* other);

  // implements Message ----------------------------------------------

  ACKSendVerifyCode* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ACKSendVerifyCode& from);
  void MergeFrom(const ACKSendVerifyCode& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 resultCode = 1;
  inline bool has_resultcode() const;
  inline void clear_resultcode();
  static const int kResultCodeFieldNumber = 1;
  inline ::google::protobuf::int32 resultcode() const;
  inline void set_resultcode(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ACKSendVerifyCode)
 private:
  inline void set_has_resultcode();
  inline void clear_has_resultcode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 resultcode_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_wzqProtocol_2eproto();
  friend void protobuf_AssignDesc_wzqProtocol_2eproto();
  friend void protobuf_ShutdownFile_wzqProtocol_2eproto();

  void InitAsDefaultInstance();
  static ACKSendVerifyCode* default_instance_;
};
// -------------------------------------------------------------------

class REQPhoneNumberLogin : public ::google::protobuf::Message {
 public:
  REQPhoneNumberLogin();
  virtual ~REQPhoneNumberLogin();

  REQPhoneNumberLogin(const REQPhoneNumberLogin& from);

  inline REQPhoneNumberLogin& operator=(const REQPhoneNumberLogin& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const REQPhoneNumberLogin& default_instance();

  void Swap(REQPhoneNumberLogin* other);

  // implements Message ----------------------------------------------

  REQPhoneNumberLogin* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const REQPhoneNumberLogin& from);
  void MergeFrom(const REQPhoneNumberLogin& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes phoneNumber = 1;
  inline bool has_phonenumber() const;
  inline void clear_phonenumber();
  static const int kPhoneNumberFieldNumber = 1;
  inline const ::std::string& phonenumber() const;
  inline void set_phonenumber(const ::std::string& value);
  inline void set_phonenumber(const char* value);
  inline void set_phonenumber(const void* value, size_t size);
  inline ::std::string* mutable_phonenumber();
  inline ::std::string* release_phonenumber();
  inline void set_allocated_phonenumber(::std::string* phonenumber);

  // required bytes verifyCode = 2;
  inline bool has_verifycode() const;
  inline void clear_verifycode();
  static const int kVerifyCodeFieldNumber = 2;
  inline const ::std::string& verifycode() const;
  inline void set_verifycode(const ::std::string& value);
  inline void set_verifycode(const char* value);
  inline void set_verifycode(const void* value, size_t size);
  inline ::std::string* mutable_verifycode();
  inline ::std::string* release_verifycode();
  inline void set_allocated_verifycode(::std::string* verifycode);

  // @@protoc_insertion_point(class_scope:REQPhoneNumberLogin)
 private:
  inline void set_has_phonenumber();
  inline void clear_has_phonenumber();
  inline void set_has_verifycode();
  inline void clear_has_verifycode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* phonenumber_;
  ::std::string* verifycode_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_wzqProtocol_2eproto();
  friend void protobuf_AssignDesc_wzqProtocol_2eproto();
  friend void protobuf_ShutdownFile_wzqProtocol_2eproto();

  void InitAsDefaultInstance();
  static REQPhoneNumberLogin* default_instance_;
};
// -------------------------------------------------------------------

class ACKPhoneNumberLogin : public ::google::protobuf::Message {
 public:
  ACKPhoneNumberLogin();
  virtual ~ACKPhoneNumberLogin();

  ACKPhoneNumberLogin(const ACKPhoneNumberLogin& from);

  inline ACKPhoneNumberLogin& operator=(const ACKPhoneNumberLogin& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ACKPhoneNumberLogin& default_instance();

  void Swap(ACKPhoneNumberLogin* other);

  // implements Message ----------------------------------------------

  ACKPhoneNumberLogin* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ACKPhoneNumberLogin& from);
  void MergeFrom(const ACKPhoneNumberLogin& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 resultCode = 1;
  inline bool has_resultcode() const;
  inline void clear_resultcode();
  static const int kResultCodeFieldNumber = 1;
  inline ::google::protobuf::int32 resultcode() const;
  inline void set_resultcode(::google::protobuf::int32 value);

  // optional bytes token = 2;
  inline bool has_token() const;
  inline void clear_token();
  static const int kTokenFieldNumber = 2;
  inline const ::std::string& token() const;
  inline void set_token(const ::std::string& value);
  inline void set_token(const char* value);
  inline void set_token(const void* value, size_t size);
  inline ::std::string* mutable_token();
  inline ::std::string* release_token();
  inline void set_allocated_token(::std::string* token);

  // optional .UserRawData baseInfo = 3;
  inline bool has_baseinfo() const;
  inline void clear_baseinfo();
  static const int kBaseInfoFieldNumber = 3;
  inline const ::UserRawData& baseinfo() const;
  inline ::UserRawData* mutable_baseinfo();
  inline ::UserRawData* release_baseinfo();
  inline void set_allocated_baseinfo(::UserRawData* baseinfo);

  // @@protoc_insertion_point(class_scope:ACKPhoneNumberLogin)
 private:
  inline void set_has_resultcode();
  inline void clear_has_resultcode();
  inline void set_has_token();
  inline void clear_has_token();
  inline void set_has_baseinfo();
  inline void clear_has_baseinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* token_;
  ::UserRawData* baseinfo_;
  ::google::protobuf::int32 resultcode_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_wzqProtocol_2eproto();
  friend void protobuf_AssignDesc_wzqProtocol_2eproto();
  friend void protobuf_ShutdownFile_wzqProtocol_2eproto();

  void InitAsDefaultInstance();
  static ACKPhoneNumberLogin* default_instance_;
};
// -------------------------------------------------------------------

class REQChangeName : public ::google::protobuf::Message {
 public:
  REQChangeName();
  virtual ~REQChangeName();

  REQChangeName(const REQChangeName& from);

  inline REQChangeName& operator=(const REQChangeName& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const REQChangeName& default_instance();

  void Swap(REQChangeName* other);

  // implements Message ----------------------------------------------

  REQChangeName* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const REQChangeName& from);
  void MergeFrom(const REQChangeName& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:REQChangeName)
 private:
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_wzqProtocol_2eproto();
  friend void protobuf_AssignDesc_wzqProtocol_2eproto();
  friend void protobuf_ShutdownFile_wzqProtocol_2eproto();

  void InitAsDefaultInstance();
  static REQChangeName* default_instance_;
};
// -------------------------------------------------------------------

class ACKChangeName : public ::google::protobuf::Message {
 public:
  ACKChangeName();
  virtual ~ACKChangeName();

  ACKChangeName(const ACKChangeName& from);

  inline ACKChangeName& operator=(const ACKChangeName& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ACKChangeName& default_instance();

  void Swap(ACKChangeName* other);

  // implements Message ----------------------------------------------

  ACKChangeName* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ACKChangeName& from);
  void MergeFrom(const ACKChangeName& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 resultCode = 1;
  inline bool has_resultcode() const;
  inline void clear_resultcode();
  static const int kResultCodeFieldNumber = 1;
  inline ::google::protobuf::int32 resultcode() const;
  inline void set_resultcode(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ACKChangeName)
 private:
  inline void set_has_resultcode();
  inline void clear_has_resultcode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 resultcode_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_wzqProtocol_2eproto();
  friend void protobuf_AssignDesc_wzqProtocol_2eproto();
  friend void protobuf_ShutdownFile_wzqProtocol_2eproto();

  void InitAsDefaultInstance();
  static ACKChangeName* default_instance_;
};
// ===================================================================


// ===================================================================

// REQHold

// -------------------------------------------------------------------

// ACKHold

// optional int32 result_id = 1;
inline bool ACKHold::has_result_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ACKHold::set_has_result_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ACKHold::clear_has_result_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ACKHold::clear_result_id() {
  result_id_ = 0;
  clear_has_result_id();
}
inline ::google::protobuf::int32 ACKHold::result_id() const {
  return result_id_;
}
inline void ACKHold::set_result_id(::google::protobuf::int32 value) {
  set_has_result_id();
  result_id_ = value;
}

// -------------------------------------------------------------------

// MsgPackage

// optional int64 msg_id = 1;
inline bool MsgPackage::has_msg_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgPackage::set_has_msg_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgPackage::clear_has_msg_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgPackage::clear_msg_id() {
  msg_id_ = GOOGLE_LONGLONG(0);
  clear_has_msg_id();
}
inline ::google::protobuf::int64 MsgPackage::msg_id() const {
  return msg_id_;
}
inline void MsgPackage::set_msg_id(::google::protobuf::int64 value) {
  set_has_msg_id();
  msg_id_ = value;
}

// optional int64 seq_id = 2;
inline bool MsgPackage::has_seq_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgPackage::set_has_seq_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgPackage::clear_has_seq_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgPackage::clear_seq_id() {
  seq_id_ = GOOGLE_LONGLONG(0);
  clear_has_seq_id();
}
inline ::google::protobuf::int64 MsgPackage::seq_id() const {
  return seq_id_;
}
inline void MsgPackage::set_seq_id(::google::protobuf::int64 value) {
  set_has_seq_id();
  seq_id_ = value;
}

// optional int64 user_id = 3;
inline bool MsgPackage::has_user_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MsgPackage::set_has_user_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MsgPackage::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MsgPackage::clear_user_id() {
  user_id_ = GOOGLE_LONGLONG(0);
  clear_has_user_id();
}
inline ::google::protobuf::int64 MsgPackage::user_id() const {
  return user_id_;
}
inline void MsgPackage::set_user_id(::google::protobuf::int64 value) {
  set_has_user_id();
  user_id_ = value;
}

// optional bytes msg = 4;
inline bool MsgPackage::has_msg() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MsgPackage::set_has_msg() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MsgPackage::clear_has_msg() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MsgPackage::clear_msg() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    msg_->clear();
  }
  clear_has_msg();
}
inline const ::std::string& MsgPackage::msg() const {
  return *msg_;
}
inline void MsgPackage::set_msg(const ::std::string& value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void MsgPackage::set_msg(const char* value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void MsgPackage::set_msg(const void* value, size_t size) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MsgPackage::mutable_msg() {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  return msg_;
}
inline ::std::string* MsgPackage::release_msg() {
  clear_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msg_;
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MsgPackage::set_allocated_msg(::std::string* msg) {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (msg) {
    set_has_msg();
    msg_ = msg;
  } else {
    clear_has_msg();
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes src = 5;
inline bool MsgPackage::has_src() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MsgPackage::set_has_src() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MsgPackage::clear_has_src() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MsgPackage::clear_src() {
  if (src_ != &::google::protobuf::internal::kEmptyString) {
    src_->clear();
  }
  clear_has_src();
}
inline const ::std::string& MsgPackage::src() const {
  return *src_;
}
inline void MsgPackage::set_src(const ::std::string& value) {
  set_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    src_ = new ::std::string;
  }
  src_->assign(value);
}
inline void MsgPackage::set_src(const char* value) {
  set_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    src_ = new ::std::string;
  }
  src_->assign(value);
}
inline void MsgPackage::set_src(const void* value, size_t size) {
  set_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    src_ = new ::std::string;
  }
  src_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MsgPackage::mutable_src() {
  set_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    src_ = new ::std::string;
  }
  return src_;
}
inline ::std::string* MsgPackage::release_src() {
  clear_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = src_;
    src_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MsgPackage::set_allocated_src(::std::string* src) {
  if (src_ != &::google::protobuf::internal::kEmptyString) {
    delete src_;
  }
  if (src) {
    set_has_src();
    src_ = src;
  } else {
    clear_has_src();
    src_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 clientid = 6;
inline bool MsgPackage::has_clientid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MsgPackage::set_has_clientid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MsgPackage::clear_has_clientid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MsgPackage::clear_clientid() {
  clientid_ = GOOGLE_LONGLONG(0);
  clear_has_clientid();
}
inline ::google::protobuf::int64 MsgPackage::clientid() const {
  return clientid_;
}
inline void MsgPackage::set_clientid(::google::protobuf::int64 value) {
  set_has_clientid();
  clientid_ = value;
}

// -------------------------------------------------------------------

// UserRawData

// optional int64 userID = 1;
inline bool UserRawData::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserRawData::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserRawData::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserRawData::clear_userid() {
  userid_ = GOOGLE_LONGLONG(0);
  clear_has_userid();
}
inline ::google::protobuf::int64 UserRawData::userid() const {
  return userid_;
}
inline void UserRawData::set_userid(::google::protobuf::int64 value) {
  set_has_userid();
  userid_ = value;
}

// optional string name = 2;
inline bool UserRawData::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserRawData::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserRawData::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserRawData::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& UserRawData::name() const {
  return *name_;
}
inline void UserRawData::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void UserRawData::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void UserRawData::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserRawData::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* UserRawData::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void UserRawData::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string avatar = 3;
inline bool UserRawData::has_avatar() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserRawData::set_has_avatar() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserRawData::clear_has_avatar() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserRawData::clear_avatar() {
  if (avatar_ != &::google::protobuf::internal::kEmptyString) {
    avatar_->clear();
  }
  clear_has_avatar();
}
inline const ::std::string& UserRawData::avatar() const {
  return *avatar_;
}
inline void UserRawData::set_avatar(const ::std::string& value) {
  set_has_avatar();
  if (avatar_ == &::google::protobuf::internal::kEmptyString) {
    avatar_ = new ::std::string;
  }
  avatar_->assign(value);
}
inline void UserRawData::set_avatar(const char* value) {
  set_has_avatar();
  if (avatar_ == &::google::protobuf::internal::kEmptyString) {
    avatar_ = new ::std::string;
  }
  avatar_->assign(value);
}
inline void UserRawData::set_avatar(const char* value, size_t size) {
  set_has_avatar();
  if (avatar_ == &::google::protobuf::internal::kEmptyString) {
    avatar_ = new ::std::string;
  }
  avatar_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserRawData::mutable_avatar() {
  set_has_avatar();
  if (avatar_ == &::google::protobuf::internal::kEmptyString) {
    avatar_ = new ::std::string;
  }
  return avatar_;
}
inline ::std::string* UserRawData::release_avatar() {
  clear_has_avatar();
  if (avatar_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = avatar_;
    avatar_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void UserRawData::set_allocated_avatar(::std::string* avatar) {
  if (avatar_ != &::google::protobuf::internal::kEmptyString) {
    delete avatar_;
  }
  if (avatar) {
    set_has_avatar();
    avatar_ = avatar;
  } else {
    clear_has_avatar();
    avatar_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string displayID = 4;
inline bool UserRawData::has_displayid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserRawData::set_has_displayid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserRawData::clear_has_displayid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserRawData::clear_displayid() {
  if (displayid_ != &::google::protobuf::internal::kEmptyString) {
    displayid_->clear();
  }
  clear_has_displayid();
}
inline const ::std::string& UserRawData::displayid() const {
  return *displayid_;
}
inline void UserRawData::set_displayid(const ::std::string& value) {
  set_has_displayid();
  if (displayid_ == &::google::protobuf::internal::kEmptyString) {
    displayid_ = new ::std::string;
  }
  displayid_->assign(value);
}
inline void UserRawData::set_displayid(const char* value) {
  set_has_displayid();
  if (displayid_ == &::google::protobuf::internal::kEmptyString) {
    displayid_ = new ::std::string;
  }
  displayid_->assign(value);
}
inline void UserRawData::set_displayid(const char* value, size_t size) {
  set_has_displayid();
  if (displayid_ == &::google::protobuf::internal::kEmptyString) {
    displayid_ = new ::std::string;
  }
  displayid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserRawData::mutable_displayid() {
  set_has_displayid();
  if (displayid_ == &::google::protobuf::internal::kEmptyString) {
    displayid_ = new ::std::string;
  }
  return displayid_;
}
inline ::std::string* UserRawData::release_displayid() {
  clear_has_displayid();
  if (displayid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = displayid_;
    displayid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void UserRawData::set_allocated_displayid(::std::string* displayid) {
  if (displayid_ != &::google::protobuf::internal::kEmptyString) {
    delete displayid_;
  }
  if (displayid) {
    set_has_displayid();
    displayid_ = displayid;
  } else {
    clear_has_displayid();
    displayid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 score = 5;
inline bool UserRawData::has_score() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UserRawData::set_has_score() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UserRawData::clear_has_score() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UserRawData::clear_score() {
  score_ = 0;
  clear_has_score();
}
inline ::google::protobuf::int32 UserRawData::score() const {
  return score_;
}
inline void UserRawData::set_score(::google::protobuf::int32 value) {
  set_has_score();
  score_ = value;
}

// optional int32 highestScore = 6;
inline bool UserRawData::has_highestscore() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UserRawData::set_has_highestscore() {
  _has_bits_[0] |= 0x00000020u;
}
inline void UserRawData::clear_has_highestscore() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void UserRawData::clear_highestscore() {
  highestscore_ = 0;
  clear_has_highestscore();
}
inline ::google::protobuf::int32 UserRawData::highestscore() const {
  return highestscore_;
}
inline void UserRawData::set_highestscore(::google::protobuf::int32 value) {
  set_has_highestscore();
  highestscore_ = value;
}

// optional .GameRecord gameRecord = 7;
inline bool UserRawData::has_gamerecord() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void UserRawData::set_has_gamerecord() {
  _has_bits_[0] |= 0x00000040u;
}
inline void UserRawData::clear_has_gamerecord() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void UserRawData::clear_gamerecord() {
  if (gamerecord_ != NULL) gamerecord_->::GameRecord::Clear();
  clear_has_gamerecord();
}
inline const ::GameRecord& UserRawData::gamerecord() const {
  return gamerecord_ != NULL ? *gamerecord_ : *default_instance_->gamerecord_;
}
inline ::GameRecord* UserRawData::mutable_gamerecord() {
  set_has_gamerecord();
  if (gamerecord_ == NULL) gamerecord_ = new ::GameRecord;
  return gamerecord_;
}
inline ::GameRecord* UserRawData::release_gamerecord() {
  clear_has_gamerecord();
  ::GameRecord* temp = gamerecord_;
  gamerecord_ = NULL;
  return temp;
}
inline void UserRawData::set_allocated_gamerecord(::GameRecord* gamerecord) {
  delete gamerecord_;
  gamerecord_ = gamerecord;
  if (gamerecord) {
    set_has_gamerecord();
  } else {
    clear_has_gamerecord();
  }
}

// -------------------------------------------------------------------

// GameRecord

// optional int32 totalCount = 1;
inline bool GameRecord::has_totalcount() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameRecord::set_has_totalcount() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameRecord::clear_has_totalcount() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GameRecord::clear_totalcount() {
  totalcount_ = 0;
  clear_has_totalcount();
}
inline ::google::protobuf::int32 GameRecord::totalcount() const {
  return totalcount_;
}
inline void GameRecord::set_totalcount(::google::protobuf::int32 value) {
  set_has_totalcount();
  totalcount_ = value;
}

// optional int32 winCount = 2;
inline bool GameRecord::has_wincount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GameRecord::set_has_wincount() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GameRecord::clear_has_wincount() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GameRecord::clear_wincount() {
  wincount_ = 0;
  clear_has_wincount();
}
inline ::google::protobuf::int32 GameRecord::wincount() const {
  return wincount_;
}
inline void GameRecord::set_wincount(::google::protobuf::int32 value) {
  set_has_wincount();
  wincount_ = value;
}

// -------------------------------------------------------------------

// REQRegister

// optional bytes account = 1;
inline bool REQRegister::has_account() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void REQRegister::set_has_account() {
  _has_bits_[0] |= 0x00000001u;
}
inline void REQRegister::clear_has_account() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void REQRegister::clear_account() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& REQRegister::account() const {
  return *account_;
}
inline void REQRegister::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void REQRegister::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void REQRegister::set_account(const void* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* REQRegister::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  return account_;
}
inline ::std::string* REQRegister::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void REQRegister::set_allocated_account(::std::string* account) {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (account) {
    set_has_account();
    account_ = account;
  } else {
    clear_has_account();
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes passwd = 2;
inline bool REQRegister::has_passwd() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void REQRegister::set_has_passwd() {
  _has_bits_[0] |= 0x00000002u;
}
inline void REQRegister::clear_has_passwd() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void REQRegister::clear_passwd() {
  if (passwd_ != &::google::protobuf::internal::kEmptyString) {
    passwd_->clear();
  }
  clear_has_passwd();
}
inline const ::std::string& REQRegister::passwd() const {
  return *passwd_;
}
inline void REQRegister::set_passwd(const ::std::string& value) {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::kEmptyString) {
    passwd_ = new ::std::string;
  }
  passwd_->assign(value);
}
inline void REQRegister::set_passwd(const char* value) {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::kEmptyString) {
    passwd_ = new ::std::string;
  }
  passwd_->assign(value);
}
inline void REQRegister::set_passwd(const void* value, size_t size) {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::kEmptyString) {
    passwd_ = new ::std::string;
  }
  passwd_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* REQRegister::mutable_passwd() {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::kEmptyString) {
    passwd_ = new ::std::string;
  }
  return passwd_;
}
inline ::std::string* REQRegister::release_passwd() {
  clear_has_passwd();
  if (passwd_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = passwd_;
    passwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void REQRegister::set_allocated_passwd(::std::string* passwd) {
  if (passwd_ != &::google::protobuf::internal::kEmptyString) {
    delete passwd_;
  }
  if (passwd) {
    set_has_passwd();
    passwd_ = passwd;
  } else {
    clear_has_passwd();
    passwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// ACKRegister

// optional int32 code = 1;
inline bool ACKRegister::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ACKRegister::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ACKRegister::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ACKRegister::clear_code() {
  code_ = 0;
  clear_has_code();
}
inline ::google::protobuf::int32 ACKRegister::code() const {
  return code_;
}
inline void ACKRegister::set_code(::google::protobuf::int32 value) {
  set_has_code();
  code_ = value;
}

// -------------------------------------------------------------------

// REQUserRegister

// required bytes userName = 1;
inline bool REQUserRegister::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void REQUserRegister::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
inline void REQUserRegister::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void REQUserRegister::clear_username() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    username_->clear();
  }
  clear_has_username();
}
inline const ::std::string& REQUserRegister::username() const {
  return *username_;
}
inline void REQUserRegister::set_username(const ::std::string& value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void REQUserRegister::set_username(const char* value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void REQUserRegister::set_username(const void* value, size_t size) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* REQUserRegister::mutable_username() {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  return username_;
}
inline ::std::string* REQUserRegister::release_username() {
  clear_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = username_;
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void REQUserRegister::set_allocated_username(::std::string* username) {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (username) {
    set_has_username();
    username_ = username;
  } else {
    clear_has_username();
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bytes userPassword = 2;
inline bool REQUserRegister::has_userpassword() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void REQUserRegister::set_has_userpassword() {
  _has_bits_[0] |= 0x00000002u;
}
inline void REQUserRegister::clear_has_userpassword() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void REQUserRegister::clear_userpassword() {
  if (userpassword_ != &::google::protobuf::internal::kEmptyString) {
    userpassword_->clear();
  }
  clear_has_userpassword();
}
inline const ::std::string& REQUserRegister::userpassword() const {
  return *userpassword_;
}
inline void REQUserRegister::set_userpassword(const ::std::string& value) {
  set_has_userpassword();
  if (userpassword_ == &::google::protobuf::internal::kEmptyString) {
    userpassword_ = new ::std::string;
  }
  userpassword_->assign(value);
}
inline void REQUserRegister::set_userpassword(const char* value) {
  set_has_userpassword();
  if (userpassword_ == &::google::protobuf::internal::kEmptyString) {
    userpassword_ = new ::std::string;
  }
  userpassword_->assign(value);
}
inline void REQUserRegister::set_userpassword(const void* value, size_t size) {
  set_has_userpassword();
  if (userpassword_ == &::google::protobuf::internal::kEmptyString) {
    userpassword_ = new ::std::string;
  }
  userpassword_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* REQUserRegister::mutable_userpassword() {
  set_has_userpassword();
  if (userpassword_ == &::google::protobuf::internal::kEmptyString) {
    userpassword_ = new ::std::string;
  }
  return userpassword_;
}
inline ::std::string* REQUserRegister::release_userpassword() {
  clear_has_userpassword();
  if (userpassword_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = userpassword_;
    userpassword_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void REQUserRegister::set_allocated_userpassword(::std::string* userpassword) {
  if (userpassword_ != &::google::protobuf::internal::kEmptyString) {
    delete userpassword_;
  }
  if (userpassword) {
    set_has_userpassword();
    userpassword_ = userpassword;
  } else {
    clear_has_userpassword();
    userpassword_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// ACKUserRegister

// required int32 result_id = 1 [default = 0];
inline bool ACKUserRegister::has_result_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ACKUserRegister::set_has_result_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ACKUserRegister::clear_has_result_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ACKUserRegister::clear_result_id() {
  result_id_ = 0;
  clear_has_result_id();
}
inline ::google::protobuf::int32 ACKUserRegister::result_id() const {
  return result_id_;
}
inline void ACKUserRegister::set_result_id(::google::protobuf::int32 value) {
  set_has_result_id();
  result_id_ = value;
}

// -------------------------------------------------------------------

// REQUserPWDLogin

// required bytes userName = 1;
inline bool REQUserPWDLogin::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void REQUserPWDLogin::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
inline void REQUserPWDLogin::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void REQUserPWDLogin::clear_username() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    username_->clear();
  }
  clear_has_username();
}
inline const ::std::string& REQUserPWDLogin::username() const {
  return *username_;
}
inline void REQUserPWDLogin::set_username(const ::std::string& value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void REQUserPWDLogin::set_username(const char* value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void REQUserPWDLogin::set_username(const void* value, size_t size) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* REQUserPWDLogin::mutable_username() {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  return username_;
}
inline ::std::string* REQUserPWDLogin::release_username() {
  clear_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = username_;
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void REQUserPWDLogin::set_allocated_username(::std::string* username) {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (username) {
    set_has_username();
    username_ = username;
  } else {
    clear_has_username();
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bytes userPassword = 2;
inline bool REQUserPWDLogin::has_userpassword() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void REQUserPWDLogin::set_has_userpassword() {
  _has_bits_[0] |= 0x00000002u;
}
inline void REQUserPWDLogin::clear_has_userpassword() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void REQUserPWDLogin::clear_userpassword() {
  if (userpassword_ != &::google::protobuf::internal::kEmptyString) {
    userpassword_->clear();
  }
  clear_has_userpassword();
}
inline const ::std::string& REQUserPWDLogin::userpassword() const {
  return *userpassword_;
}
inline void REQUserPWDLogin::set_userpassword(const ::std::string& value) {
  set_has_userpassword();
  if (userpassword_ == &::google::protobuf::internal::kEmptyString) {
    userpassword_ = new ::std::string;
  }
  userpassword_->assign(value);
}
inline void REQUserPWDLogin::set_userpassword(const char* value) {
  set_has_userpassword();
  if (userpassword_ == &::google::protobuf::internal::kEmptyString) {
    userpassword_ = new ::std::string;
  }
  userpassword_->assign(value);
}
inline void REQUserPWDLogin::set_userpassword(const void* value, size_t size) {
  set_has_userpassword();
  if (userpassword_ == &::google::protobuf::internal::kEmptyString) {
    userpassword_ = new ::std::string;
  }
  userpassword_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* REQUserPWDLogin::mutable_userpassword() {
  set_has_userpassword();
  if (userpassword_ == &::google::protobuf::internal::kEmptyString) {
    userpassword_ = new ::std::string;
  }
  return userpassword_;
}
inline ::std::string* REQUserPWDLogin::release_userpassword() {
  clear_has_userpassword();
  if (userpassword_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = userpassword_;
    userpassword_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void REQUserPWDLogin::set_allocated_userpassword(::std::string* userpassword) {
  if (userpassword_ != &::google::protobuf::internal::kEmptyString) {
    delete userpassword_;
  }
  if (userpassword) {
    set_has_userpassword();
    userpassword_ = userpassword;
  } else {
    clear_has_userpassword();
    userpassword_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// ACKUserPWDLogin

// required int32 result_id = 1 [default = 0];
inline bool ACKUserPWDLogin::has_result_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ACKUserPWDLogin::set_has_result_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ACKUserPWDLogin::clear_has_result_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ACKUserPWDLogin::clear_result_id() {
  result_id_ = 0;
  clear_has_result_id();
}
inline ::google::protobuf::int32 ACKUserPWDLogin::result_id() const {
  return result_id_;
}
inline void ACKUserPWDLogin::set_result_id(::google::protobuf::int32 value) {
  set_has_result_id();
  result_id_ = value;
}

// optional bytes token = 2;
inline bool ACKUserPWDLogin::has_token() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ACKUserPWDLogin::set_has_token() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ACKUserPWDLogin::clear_has_token() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ACKUserPWDLogin::clear_token() {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    token_->clear();
  }
  clear_has_token();
}
inline const ::std::string& ACKUserPWDLogin::token() const {
  return *token_;
}
inline void ACKUserPWDLogin::set_token(const ::std::string& value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(value);
}
inline void ACKUserPWDLogin::set_token(const char* value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(value);
}
inline void ACKUserPWDLogin::set_token(const void* value, size_t size) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ACKUserPWDLogin::mutable_token() {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  return token_;
}
inline ::std::string* ACKUserPWDLogin::release_token() {
  clear_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = token_;
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ACKUserPWDLogin::set_allocated_token(::std::string* token) {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (token) {
    set_has_token();
    token_ = token;
  } else {
    clear_has_token();
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .UserRawData baseInfo = 3;
inline bool ACKUserPWDLogin::has_baseinfo() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ACKUserPWDLogin::set_has_baseinfo() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ACKUserPWDLogin::clear_has_baseinfo() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ACKUserPWDLogin::clear_baseinfo() {
  if (baseinfo_ != NULL) baseinfo_->::UserRawData::Clear();
  clear_has_baseinfo();
}
inline const ::UserRawData& ACKUserPWDLogin::baseinfo() const {
  return baseinfo_ != NULL ? *baseinfo_ : *default_instance_->baseinfo_;
}
inline ::UserRawData* ACKUserPWDLogin::mutable_baseinfo() {
  set_has_baseinfo();
  if (baseinfo_ == NULL) baseinfo_ = new ::UserRawData;
  return baseinfo_;
}
inline ::UserRawData* ACKUserPWDLogin::release_baseinfo() {
  clear_has_baseinfo();
  ::UserRawData* temp = baseinfo_;
  baseinfo_ = NULL;
  return temp;
}
inline void ACKUserPWDLogin::set_allocated_baseinfo(::UserRawData* baseinfo) {
  delete baseinfo_;
  baseinfo_ = baseinfo;
  if (baseinfo) {
    set_has_baseinfo();
  } else {
    clear_has_baseinfo();
  }
}

// -------------------------------------------------------------------

// REQUserTokenLogin

// required bytes token = 1;
inline bool REQUserTokenLogin::has_token() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void REQUserTokenLogin::set_has_token() {
  _has_bits_[0] |= 0x00000001u;
}
inline void REQUserTokenLogin::clear_has_token() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void REQUserTokenLogin::clear_token() {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    token_->clear();
  }
  clear_has_token();
}
inline const ::std::string& REQUserTokenLogin::token() const {
  return *token_;
}
inline void REQUserTokenLogin::set_token(const ::std::string& value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(value);
}
inline void REQUserTokenLogin::set_token(const char* value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(value);
}
inline void REQUserTokenLogin::set_token(const void* value, size_t size) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* REQUserTokenLogin::mutable_token() {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  return token_;
}
inline ::std::string* REQUserTokenLogin::release_token() {
  clear_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = token_;
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void REQUserTokenLogin::set_allocated_token(::std::string* token) {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (token) {
    set_has_token();
    token_ = token;
  } else {
    clear_has_token();
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// ACKUserTokenLogin

// optional int32 resultCode = 1;
inline bool ACKUserTokenLogin::has_resultcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ACKUserTokenLogin::set_has_resultcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ACKUserTokenLogin::clear_has_resultcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ACKUserTokenLogin::clear_resultcode() {
  resultcode_ = 0;
  clear_has_resultcode();
}
inline ::google::protobuf::int32 ACKUserTokenLogin::resultcode() const {
  return resultcode_;
}
inline void ACKUserTokenLogin::set_resultcode(::google::protobuf::int32 value) {
  set_has_resultcode();
  resultcode_ = value;
}

// optional .UserRawData baseInfo = 2;
inline bool ACKUserTokenLogin::has_baseinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ACKUserTokenLogin::set_has_baseinfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ACKUserTokenLogin::clear_has_baseinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ACKUserTokenLogin::clear_baseinfo() {
  if (baseinfo_ != NULL) baseinfo_->::UserRawData::Clear();
  clear_has_baseinfo();
}
inline const ::UserRawData& ACKUserTokenLogin::baseinfo() const {
  return baseinfo_ != NULL ? *baseinfo_ : *default_instance_->baseinfo_;
}
inline ::UserRawData* ACKUserTokenLogin::mutable_baseinfo() {
  set_has_baseinfo();
  if (baseinfo_ == NULL) baseinfo_ = new ::UserRawData;
  return baseinfo_;
}
inline ::UserRawData* ACKUserTokenLogin::release_baseinfo() {
  clear_has_baseinfo();
  ::UserRawData* temp = baseinfo_;
  baseinfo_ = NULL;
  return temp;
}
inline void ACKUserTokenLogin::set_allocated_baseinfo(::UserRawData* baseinfo) {
  delete baseinfo_;
  baseinfo_ = baseinfo;
  if (baseinfo) {
    set_has_baseinfo();
  } else {
    clear_has_baseinfo();
  }
}

// -------------------------------------------------------------------

// REQSendVerifyCode

// required bytes phoneNumber = 1;
inline bool REQSendVerifyCode::has_phonenumber() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void REQSendVerifyCode::set_has_phonenumber() {
  _has_bits_[0] |= 0x00000001u;
}
inline void REQSendVerifyCode::clear_has_phonenumber() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void REQSendVerifyCode::clear_phonenumber() {
  if (phonenumber_ != &::google::protobuf::internal::kEmptyString) {
    phonenumber_->clear();
  }
  clear_has_phonenumber();
}
inline const ::std::string& REQSendVerifyCode::phonenumber() const {
  return *phonenumber_;
}
inline void REQSendVerifyCode::set_phonenumber(const ::std::string& value) {
  set_has_phonenumber();
  if (phonenumber_ == &::google::protobuf::internal::kEmptyString) {
    phonenumber_ = new ::std::string;
  }
  phonenumber_->assign(value);
}
inline void REQSendVerifyCode::set_phonenumber(const char* value) {
  set_has_phonenumber();
  if (phonenumber_ == &::google::protobuf::internal::kEmptyString) {
    phonenumber_ = new ::std::string;
  }
  phonenumber_->assign(value);
}
inline void REQSendVerifyCode::set_phonenumber(const void* value, size_t size) {
  set_has_phonenumber();
  if (phonenumber_ == &::google::protobuf::internal::kEmptyString) {
    phonenumber_ = new ::std::string;
  }
  phonenumber_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* REQSendVerifyCode::mutable_phonenumber() {
  set_has_phonenumber();
  if (phonenumber_ == &::google::protobuf::internal::kEmptyString) {
    phonenumber_ = new ::std::string;
  }
  return phonenumber_;
}
inline ::std::string* REQSendVerifyCode::release_phonenumber() {
  clear_has_phonenumber();
  if (phonenumber_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = phonenumber_;
    phonenumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void REQSendVerifyCode::set_allocated_phonenumber(::std::string* phonenumber) {
  if (phonenumber_ != &::google::protobuf::internal::kEmptyString) {
    delete phonenumber_;
  }
  if (phonenumber) {
    set_has_phonenumber();
    phonenumber_ = phonenumber;
  } else {
    clear_has_phonenumber();
    phonenumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// ACKSendVerifyCode

// optional int32 resultCode = 1;
inline bool ACKSendVerifyCode::has_resultcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ACKSendVerifyCode::set_has_resultcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ACKSendVerifyCode::clear_has_resultcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ACKSendVerifyCode::clear_resultcode() {
  resultcode_ = 0;
  clear_has_resultcode();
}
inline ::google::protobuf::int32 ACKSendVerifyCode::resultcode() const {
  return resultcode_;
}
inline void ACKSendVerifyCode::set_resultcode(::google::protobuf::int32 value) {
  set_has_resultcode();
  resultcode_ = value;
}

// -------------------------------------------------------------------

// REQPhoneNumberLogin

// required bytes phoneNumber = 1;
inline bool REQPhoneNumberLogin::has_phonenumber() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void REQPhoneNumberLogin::set_has_phonenumber() {
  _has_bits_[0] |= 0x00000001u;
}
inline void REQPhoneNumberLogin::clear_has_phonenumber() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void REQPhoneNumberLogin::clear_phonenumber() {
  if (phonenumber_ != &::google::protobuf::internal::kEmptyString) {
    phonenumber_->clear();
  }
  clear_has_phonenumber();
}
inline const ::std::string& REQPhoneNumberLogin::phonenumber() const {
  return *phonenumber_;
}
inline void REQPhoneNumberLogin::set_phonenumber(const ::std::string& value) {
  set_has_phonenumber();
  if (phonenumber_ == &::google::protobuf::internal::kEmptyString) {
    phonenumber_ = new ::std::string;
  }
  phonenumber_->assign(value);
}
inline void REQPhoneNumberLogin::set_phonenumber(const char* value) {
  set_has_phonenumber();
  if (phonenumber_ == &::google::protobuf::internal::kEmptyString) {
    phonenumber_ = new ::std::string;
  }
  phonenumber_->assign(value);
}
inline void REQPhoneNumberLogin::set_phonenumber(const void* value, size_t size) {
  set_has_phonenumber();
  if (phonenumber_ == &::google::protobuf::internal::kEmptyString) {
    phonenumber_ = new ::std::string;
  }
  phonenumber_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* REQPhoneNumberLogin::mutable_phonenumber() {
  set_has_phonenumber();
  if (phonenumber_ == &::google::protobuf::internal::kEmptyString) {
    phonenumber_ = new ::std::string;
  }
  return phonenumber_;
}
inline ::std::string* REQPhoneNumberLogin::release_phonenumber() {
  clear_has_phonenumber();
  if (phonenumber_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = phonenumber_;
    phonenumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void REQPhoneNumberLogin::set_allocated_phonenumber(::std::string* phonenumber) {
  if (phonenumber_ != &::google::protobuf::internal::kEmptyString) {
    delete phonenumber_;
  }
  if (phonenumber) {
    set_has_phonenumber();
    phonenumber_ = phonenumber;
  } else {
    clear_has_phonenumber();
    phonenumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bytes verifyCode = 2;
inline bool REQPhoneNumberLogin::has_verifycode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void REQPhoneNumberLogin::set_has_verifycode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void REQPhoneNumberLogin::clear_has_verifycode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void REQPhoneNumberLogin::clear_verifycode() {
  if (verifycode_ != &::google::protobuf::internal::kEmptyString) {
    verifycode_->clear();
  }
  clear_has_verifycode();
}
inline const ::std::string& REQPhoneNumberLogin::verifycode() const {
  return *verifycode_;
}
inline void REQPhoneNumberLogin::set_verifycode(const ::std::string& value) {
  set_has_verifycode();
  if (verifycode_ == &::google::protobuf::internal::kEmptyString) {
    verifycode_ = new ::std::string;
  }
  verifycode_->assign(value);
}
inline void REQPhoneNumberLogin::set_verifycode(const char* value) {
  set_has_verifycode();
  if (verifycode_ == &::google::protobuf::internal::kEmptyString) {
    verifycode_ = new ::std::string;
  }
  verifycode_->assign(value);
}
inline void REQPhoneNumberLogin::set_verifycode(const void* value, size_t size) {
  set_has_verifycode();
  if (verifycode_ == &::google::protobuf::internal::kEmptyString) {
    verifycode_ = new ::std::string;
  }
  verifycode_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* REQPhoneNumberLogin::mutable_verifycode() {
  set_has_verifycode();
  if (verifycode_ == &::google::protobuf::internal::kEmptyString) {
    verifycode_ = new ::std::string;
  }
  return verifycode_;
}
inline ::std::string* REQPhoneNumberLogin::release_verifycode() {
  clear_has_verifycode();
  if (verifycode_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = verifycode_;
    verifycode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void REQPhoneNumberLogin::set_allocated_verifycode(::std::string* verifycode) {
  if (verifycode_ != &::google::protobuf::internal::kEmptyString) {
    delete verifycode_;
  }
  if (verifycode) {
    set_has_verifycode();
    verifycode_ = verifycode;
  } else {
    clear_has_verifycode();
    verifycode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// ACKPhoneNumberLogin

// optional int32 resultCode = 1;
inline bool ACKPhoneNumberLogin::has_resultcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ACKPhoneNumberLogin::set_has_resultcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ACKPhoneNumberLogin::clear_has_resultcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ACKPhoneNumberLogin::clear_resultcode() {
  resultcode_ = 0;
  clear_has_resultcode();
}
inline ::google::protobuf::int32 ACKPhoneNumberLogin::resultcode() const {
  return resultcode_;
}
inline void ACKPhoneNumberLogin::set_resultcode(::google::protobuf::int32 value) {
  set_has_resultcode();
  resultcode_ = value;
}

// optional bytes token = 2;
inline bool ACKPhoneNumberLogin::has_token() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ACKPhoneNumberLogin::set_has_token() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ACKPhoneNumberLogin::clear_has_token() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ACKPhoneNumberLogin::clear_token() {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    token_->clear();
  }
  clear_has_token();
}
inline const ::std::string& ACKPhoneNumberLogin::token() const {
  return *token_;
}
inline void ACKPhoneNumberLogin::set_token(const ::std::string& value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(value);
}
inline void ACKPhoneNumberLogin::set_token(const char* value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(value);
}
inline void ACKPhoneNumberLogin::set_token(const void* value, size_t size) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ACKPhoneNumberLogin::mutable_token() {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  return token_;
}
inline ::std::string* ACKPhoneNumberLogin::release_token() {
  clear_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = token_;
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ACKPhoneNumberLogin::set_allocated_token(::std::string* token) {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (token) {
    set_has_token();
    token_ = token;
  } else {
    clear_has_token();
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .UserRawData baseInfo = 3;
inline bool ACKPhoneNumberLogin::has_baseinfo() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ACKPhoneNumberLogin::set_has_baseinfo() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ACKPhoneNumberLogin::clear_has_baseinfo() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ACKPhoneNumberLogin::clear_baseinfo() {
  if (baseinfo_ != NULL) baseinfo_->::UserRawData::Clear();
  clear_has_baseinfo();
}
inline const ::UserRawData& ACKPhoneNumberLogin::baseinfo() const {
  return baseinfo_ != NULL ? *baseinfo_ : *default_instance_->baseinfo_;
}
inline ::UserRawData* ACKPhoneNumberLogin::mutable_baseinfo() {
  set_has_baseinfo();
  if (baseinfo_ == NULL) baseinfo_ = new ::UserRawData;
  return baseinfo_;
}
inline ::UserRawData* ACKPhoneNumberLogin::release_baseinfo() {
  clear_has_baseinfo();
  ::UserRawData* temp = baseinfo_;
  baseinfo_ = NULL;
  return temp;
}
inline void ACKPhoneNumberLogin::set_allocated_baseinfo(::UserRawData* baseinfo) {
  delete baseinfo_;
  baseinfo_ = baseinfo;
  if (baseinfo) {
    set_has_baseinfo();
  } else {
    clear_has_baseinfo();
  }
}

// -------------------------------------------------------------------

// REQChangeName

// optional string name = 1;
inline bool REQChangeName::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void REQChangeName::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void REQChangeName::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void REQChangeName::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& REQChangeName::name() const {
  return *name_;
}
inline void REQChangeName::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void REQChangeName::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void REQChangeName::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* REQChangeName::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* REQChangeName::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void REQChangeName::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// ACKChangeName

// optional int32 resultCode = 1;
inline bool ACKChangeName::has_resultcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ACKChangeName::set_has_resultcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ACKChangeName::clear_has_resultcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ACKChangeName::clear_resultcode() {
  resultcode_ = 0;
  clear_has_resultcode();
}
inline ::google::protobuf::int32 ACKChangeName::resultcode() const {
  return resultcode_;
}
inline void ACKChangeName::set_resultcode(::google::protobuf::int32 value) {
  set_has_resultcode();
  resultcode_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::LoginType>() {
  return ::LoginType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_wzqProtocol_2eproto__INCLUDED
