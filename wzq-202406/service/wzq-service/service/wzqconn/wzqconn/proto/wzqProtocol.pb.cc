// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: wzqProtocol.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "wzqProtocol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* REQHold_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  REQHold_reflection_ = NULL;
const ::google::protobuf::Descriptor* ACKHold_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ACKHold_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgPackage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPackage_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserRawData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserRawData_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameRecord_reflection_ = NULL;
const ::google::protobuf::Descriptor* REQRegister_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  REQRegister_reflection_ = NULL;
const ::google::protobuf::Descriptor* ACKRegister_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ACKRegister_reflection_ = NULL;
const ::google::protobuf::Descriptor* REQUserRegister_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  REQUserRegister_reflection_ = NULL;
const ::google::protobuf::Descriptor* ACKUserRegister_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ACKUserRegister_reflection_ = NULL;
const ::google::protobuf::Descriptor* REQUserPWDLogin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  REQUserPWDLogin_reflection_ = NULL;
const ::google::protobuf::Descriptor* ACKUserPWDLogin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ACKUserPWDLogin_reflection_ = NULL;
const ::google::protobuf::Descriptor* REQUserTokenLogin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  REQUserTokenLogin_reflection_ = NULL;
const ::google::protobuf::Descriptor* ACKUserTokenLogin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ACKUserTokenLogin_reflection_ = NULL;
const ::google::protobuf::Descriptor* REQSendVerifyCode_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  REQSendVerifyCode_reflection_ = NULL;
const ::google::protobuf::Descriptor* ACKSendVerifyCode_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ACKSendVerifyCode_reflection_ = NULL;
const ::google::protobuf::Descriptor* REQPhoneNumberLogin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  REQPhoneNumberLogin_reflection_ = NULL;
const ::google::protobuf::Descriptor* ACKPhoneNumberLogin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ACKPhoneNumberLogin_reflection_ = NULL;
const ::google::protobuf::Descriptor* REQChangeName_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  REQChangeName_reflection_ = NULL;
const ::google::protobuf::Descriptor* ACKChangeName_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ACKChangeName_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* LoginType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_wzqProtocol_2eproto() {
  protobuf_AddDesc_wzqProtocol_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "wzqProtocol.proto");
  GOOGLE_CHECK(file != NULL);
  REQHold_descriptor_ = file->message_type(0);
  static const int REQHold_offsets_[1] = {
  };
  REQHold_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      REQHold_descriptor_,
      REQHold::default_instance_,
      REQHold_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQHold, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQHold, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(REQHold));
  ACKHold_descriptor_ = file->message_type(1);
  static const int ACKHold_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKHold, result_id_),
  };
  ACKHold_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ACKHold_descriptor_,
      ACKHold::default_instance_,
      ACKHold_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKHold, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKHold, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ACKHold));
  MsgPackage_descriptor_ = file->message_type(2);
  static const int MsgPackage_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPackage, msg_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPackage, seq_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPackage, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPackage, msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPackage, src_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPackage, clientid_),
  };
  MsgPackage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPackage_descriptor_,
      MsgPackage::default_instance_,
      MsgPackage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPackage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPackage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPackage));
  UserRawData_descriptor_ = file->message_type(3);
  static const int UserRawData_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRawData, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRawData, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRawData, avatar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRawData, displayid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRawData, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRawData, highestscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRawData, gamerecord_),
  };
  UserRawData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserRawData_descriptor_,
      UserRawData::default_instance_,
      UserRawData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRawData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRawData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserRawData));
  GameRecord_descriptor_ = file->message_type(4);
  static const int GameRecord_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameRecord, totalcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameRecord, wincount_),
  };
  GameRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameRecord_descriptor_,
      GameRecord::default_instance_,
      GameRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameRecord));
  REQRegister_descriptor_ = file->message_type(5);
  static const int REQRegister_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQRegister, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQRegister, passwd_),
  };
  REQRegister_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      REQRegister_descriptor_,
      REQRegister::default_instance_,
      REQRegister_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQRegister, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQRegister, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(REQRegister));
  ACKRegister_descriptor_ = file->message_type(6);
  static const int ACKRegister_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKRegister, code_),
  };
  ACKRegister_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ACKRegister_descriptor_,
      ACKRegister::default_instance_,
      ACKRegister_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKRegister, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKRegister, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ACKRegister));
  REQUserRegister_descriptor_ = file->message_type(7);
  static const int REQUserRegister_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQUserRegister, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQUserRegister, userpassword_),
  };
  REQUserRegister_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      REQUserRegister_descriptor_,
      REQUserRegister::default_instance_,
      REQUserRegister_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQUserRegister, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQUserRegister, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(REQUserRegister));
  ACKUserRegister_descriptor_ = file->message_type(8);
  static const int ACKUserRegister_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKUserRegister, result_id_),
  };
  ACKUserRegister_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ACKUserRegister_descriptor_,
      ACKUserRegister::default_instance_,
      ACKUserRegister_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKUserRegister, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKUserRegister, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ACKUserRegister));
  REQUserPWDLogin_descriptor_ = file->message_type(9);
  static const int REQUserPWDLogin_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQUserPWDLogin, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQUserPWDLogin, userpassword_),
  };
  REQUserPWDLogin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      REQUserPWDLogin_descriptor_,
      REQUserPWDLogin::default_instance_,
      REQUserPWDLogin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQUserPWDLogin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQUserPWDLogin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(REQUserPWDLogin));
  ACKUserPWDLogin_descriptor_ = file->message_type(10);
  static const int ACKUserPWDLogin_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKUserPWDLogin, result_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKUserPWDLogin, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKUserPWDLogin, baseinfo_),
  };
  ACKUserPWDLogin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ACKUserPWDLogin_descriptor_,
      ACKUserPWDLogin::default_instance_,
      ACKUserPWDLogin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKUserPWDLogin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKUserPWDLogin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ACKUserPWDLogin));
  REQUserTokenLogin_descriptor_ = file->message_type(11);
  static const int REQUserTokenLogin_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQUserTokenLogin, token_),
  };
  REQUserTokenLogin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      REQUserTokenLogin_descriptor_,
      REQUserTokenLogin::default_instance_,
      REQUserTokenLogin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQUserTokenLogin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQUserTokenLogin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(REQUserTokenLogin));
  ACKUserTokenLogin_descriptor_ = file->message_type(12);
  static const int ACKUserTokenLogin_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKUserTokenLogin, resultcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKUserTokenLogin, baseinfo_),
  };
  ACKUserTokenLogin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ACKUserTokenLogin_descriptor_,
      ACKUserTokenLogin::default_instance_,
      ACKUserTokenLogin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKUserTokenLogin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKUserTokenLogin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ACKUserTokenLogin));
  REQSendVerifyCode_descriptor_ = file->message_type(13);
  static const int REQSendVerifyCode_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQSendVerifyCode, phonenumber_),
  };
  REQSendVerifyCode_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      REQSendVerifyCode_descriptor_,
      REQSendVerifyCode::default_instance_,
      REQSendVerifyCode_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQSendVerifyCode, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQSendVerifyCode, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(REQSendVerifyCode));
  ACKSendVerifyCode_descriptor_ = file->message_type(14);
  static const int ACKSendVerifyCode_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKSendVerifyCode, resultcode_),
  };
  ACKSendVerifyCode_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ACKSendVerifyCode_descriptor_,
      ACKSendVerifyCode::default_instance_,
      ACKSendVerifyCode_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKSendVerifyCode, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKSendVerifyCode, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ACKSendVerifyCode));
  REQPhoneNumberLogin_descriptor_ = file->message_type(15);
  static const int REQPhoneNumberLogin_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQPhoneNumberLogin, phonenumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQPhoneNumberLogin, verifycode_),
  };
  REQPhoneNumberLogin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      REQPhoneNumberLogin_descriptor_,
      REQPhoneNumberLogin::default_instance_,
      REQPhoneNumberLogin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQPhoneNumberLogin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQPhoneNumberLogin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(REQPhoneNumberLogin));
  ACKPhoneNumberLogin_descriptor_ = file->message_type(16);
  static const int ACKPhoneNumberLogin_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKPhoneNumberLogin, resultcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKPhoneNumberLogin, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKPhoneNumberLogin, baseinfo_),
  };
  ACKPhoneNumberLogin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ACKPhoneNumberLogin_descriptor_,
      ACKPhoneNumberLogin::default_instance_,
      ACKPhoneNumberLogin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKPhoneNumberLogin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKPhoneNumberLogin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ACKPhoneNumberLogin));
  REQChangeName_descriptor_ = file->message_type(17);
  static const int REQChangeName_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQChangeName, name_),
  };
  REQChangeName_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      REQChangeName_descriptor_,
      REQChangeName::default_instance_,
      REQChangeName_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQChangeName, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQChangeName, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(REQChangeName));
  ACKChangeName_descriptor_ = file->message_type(18);
  static const int ACKChangeName_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKChangeName, resultcode_),
  };
  ACKChangeName_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ACKChangeName_descriptor_,
      ACKChangeName::default_instance_,
      ACKChangeName_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKChangeName, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKChangeName, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ACKChangeName));
  LoginType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_wzqProtocol_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    REQHold_descriptor_, &REQHold::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ACKHold_descriptor_, &ACKHold::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPackage_descriptor_, &MsgPackage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserRawData_descriptor_, &UserRawData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameRecord_descriptor_, &GameRecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    REQRegister_descriptor_, &REQRegister::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ACKRegister_descriptor_, &ACKRegister::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    REQUserRegister_descriptor_, &REQUserRegister::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ACKUserRegister_descriptor_, &ACKUserRegister::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    REQUserPWDLogin_descriptor_, &REQUserPWDLogin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ACKUserPWDLogin_descriptor_, &ACKUserPWDLogin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    REQUserTokenLogin_descriptor_, &REQUserTokenLogin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ACKUserTokenLogin_descriptor_, &ACKUserTokenLogin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    REQSendVerifyCode_descriptor_, &REQSendVerifyCode::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ACKSendVerifyCode_descriptor_, &ACKSendVerifyCode::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    REQPhoneNumberLogin_descriptor_, &REQPhoneNumberLogin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ACKPhoneNumberLogin_descriptor_, &ACKPhoneNumberLogin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    REQChangeName_descriptor_, &REQChangeName::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ACKChangeName_descriptor_, &ACKChangeName::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_wzqProtocol_2eproto() {
  delete REQHold::default_instance_;
  delete REQHold_reflection_;
  delete ACKHold::default_instance_;
  delete ACKHold_reflection_;
  delete MsgPackage::default_instance_;
  delete MsgPackage_reflection_;
  delete UserRawData::default_instance_;
  delete UserRawData_reflection_;
  delete GameRecord::default_instance_;
  delete GameRecord_reflection_;
  delete REQRegister::default_instance_;
  delete REQRegister_reflection_;
  delete ACKRegister::default_instance_;
  delete ACKRegister_reflection_;
  delete REQUserRegister::default_instance_;
  delete REQUserRegister_reflection_;
  delete ACKUserRegister::default_instance_;
  delete ACKUserRegister_reflection_;
  delete REQUserPWDLogin::default_instance_;
  delete REQUserPWDLogin_reflection_;
  delete ACKUserPWDLogin::default_instance_;
  delete ACKUserPWDLogin_reflection_;
  delete REQUserTokenLogin::default_instance_;
  delete REQUserTokenLogin_reflection_;
  delete ACKUserTokenLogin::default_instance_;
  delete ACKUserTokenLogin_reflection_;
  delete REQSendVerifyCode::default_instance_;
  delete REQSendVerifyCode_reflection_;
  delete ACKSendVerifyCode::default_instance_;
  delete ACKSendVerifyCode_reflection_;
  delete REQPhoneNumberLogin::default_instance_;
  delete REQPhoneNumberLogin_reflection_;
  delete ACKPhoneNumberLogin::default_instance_;
  delete ACKPhoneNumberLogin_reflection_;
  delete REQChangeName::default_instance_;
  delete REQChangeName_reflection_;
  delete ACKChangeName::default_instance_;
  delete ACKChangeName_reflection_;
}

void protobuf_AddDesc_wzqProtocol_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021wzqProtocol.proto\"\t\n\007REQHold\"\034\n\007ACKHol"
    "d\022\021\n\tresult_id\030\001 \001(\005\"i\n\nMsgPackage\022\016\n\006ms"
    "g_id\030\001 \001(\003\022\016\n\006seq_id\030\002 \001(\003\022\017\n\007user_id\030\003 "
    "\001(\003\022\013\n\003msg\030\004 \001(\014\022\013\n\003src\030\005 \001(\014\022\020\n\010clienti"
    "d\030\006 \001(\003\"\224\001\n\013UserRawData\022\016\n\006userID\030\001 \001(\003\022"
    "\014\n\004name\030\002 \001(\t\022\016\n\006avatar\030\003 \001(\t\022\021\n\tdisplay"
    "ID\030\004 \001(\t\022\r\n\005score\030\005 \001(\005\022\024\n\014highestScore\030"
    "\006 \001(\005\022\037\n\ngameRecord\030\007 \001(\0132\013.GameRecord\"2"
    "\n\nGameRecord\022\022\n\ntotalCount\030\001 \001(\005\022\020\n\010winC"
    "ount\030\002 \001(\005\".\n\013REQRegister\022\017\n\007account\030\001 \001"
    "(\014\022\016\n\006passwd\030\002 \001(\014\"\033\n\013ACKRegister\022\014\n\004cod"
    "e\030\001 \001(\005\"9\n\017REQUserRegister\022\020\n\010userName\030\001"
    " \002(\014\022\024\n\014userPassword\030\002 \002(\014\"\'\n\017ACKUserReg"
    "ister\022\024\n\tresult_id\030\001 \002(\005:\0010\"9\n\017REQUserPW"
    "DLogin\022\020\n\010userName\030\001 \002(\014\022\024\n\014userPassword"
    "\030\002 \002(\014\"V\n\017ACKUserPWDLogin\022\024\n\tresult_id\030\001"
    " \002(\005:\0010\022\r\n\005token\030\002 \001(\014\022\036\n\010baseInfo\030\003 \001(\013"
    "2\014.UserRawData\"\"\n\021REQUserTokenLogin\022\r\n\005t"
    "oken\030\001 \002(\014\"G\n\021ACKUserTokenLogin\022\022\n\nresul"
    "tCode\030\001 \001(\005\022\036\n\010baseInfo\030\002 \001(\0132\014.UserRawD"
    "ata\"(\n\021REQSendVerifyCode\022\023\n\013phoneNumber\030"
    "\001 \002(\014\"\'\n\021ACKSendVerifyCode\022\022\n\nresultCode"
    "\030\001 \001(\005\">\n\023REQPhoneNumberLogin\022\023\n\013phoneNu"
    "mber\030\001 \002(\014\022\022\n\nverifyCode\030\002 \002(\014\"X\n\023ACKPho"
    "neNumberLogin\022\022\n\nresultCode\030\001 \001(\005\022\r\n\005tok"
    "en\030\002 \001(\014\022\036\n\010baseInfo\030\003 \001(\0132\014.UserRawData"
    "\"\035\n\rREQChangeName\022\014\n\004name\030\001 \001(\t\"#\n\rACKCh"
    "angeName\022\022\n\nresultCode\030\001 \001(\005*6\n\tLoginTyp"
    "e\022\016\n\nLT_UnKnown\020\000\022\n\n\006LT_PWD\020\001\022\r\n\tLT_MOBI"
    "LE\020\002", 1164);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "wzqProtocol.proto", &protobuf_RegisterTypes);
  REQHold::default_instance_ = new REQHold();
  ACKHold::default_instance_ = new ACKHold();
  MsgPackage::default_instance_ = new MsgPackage();
  UserRawData::default_instance_ = new UserRawData();
  GameRecord::default_instance_ = new GameRecord();
  REQRegister::default_instance_ = new REQRegister();
  ACKRegister::default_instance_ = new ACKRegister();
  REQUserRegister::default_instance_ = new REQUserRegister();
  ACKUserRegister::default_instance_ = new ACKUserRegister();
  REQUserPWDLogin::default_instance_ = new REQUserPWDLogin();
  ACKUserPWDLogin::default_instance_ = new ACKUserPWDLogin();
  REQUserTokenLogin::default_instance_ = new REQUserTokenLogin();
  ACKUserTokenLogin::default_instance_ = new ACKUserTokenLogin();
  REQSendVerifyCode::default_instance_ = new REQSendVerifyCode();
  ACKSendVerifyCode::default_instance_ = new ACKSendVerifyCode();
  REQPhoneNumberLogin::default_instance_ = new REQPhoneNumberLogin();
  ACKPhoneNumberLogin::default_instance_ = new ACKPhoneNumberLogin();
  REQChangeName::default_instance_ = new REQChangeName();
  ACKChangeName::default_instance_ = new ACKChangeName();
  REQHold::default_instance_->InitAsDefaultInstance();
  ACKHold::default_instance_->InitAsDefaultInstance();
  MsgPackage::default_instance_->InitAsDefaultInstance();
  UserRawData::default_instance_->InitAsDefaultInstance();
  GameRecord::default_instance_->InitAsDefaultInstance();
  REQRegister::default_instance_->InitAsDefaultInstance();
  ACKRegister::default_instance_->InitAsDefaultInstance();
  REQUserRegister::default_instance_->InitAsDefaultInstance();
  ACKUserRegister::default_instance_->InitAsDefaultInstance();
  REQUserPWDLogin::default_instance_->InitAsDefaultInstance();
  ACKUserPWDLogin::default_instance_->InitAsDefaultInstance();
  REQUserTokenLogin::default_instance_->InitAsDefaultInstance();
  ACKUserTokenLogin::default_instance_->InitAsDefaultInstance();
  REQSendVerifyCode::default_instance_->InitAsDefaultInstance();
  ACKSendVerifyCode::default_instance_->InitAsDefaultInstance();
  REQPhoneNumberLogin::default_instance_->InitAsDefaultInstance();
  ACKPhoneNumberLogin::default_instance_->InitAsDefaultInstance();
  REQChangeName::default_instance_->InitAsDefaultInstance();
  ACKChangeName::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_wzqProtocol_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_wzqProtocol_2eproto {
  StaticDescriptorInitializer_wzqProtocol_2eproto() {
    protobuf_AddDesc_wzqProtocol_2eproto();
  }
} static_descriptor_initializer_wzqProtocol_2eproto_;
const ::google::protobuf::EnumDescriptor* LoginType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginType_descriptor_;
}
bool LoginType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

REQHold::REQHold()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void REQHold::InitAsDefaultInstance() {
}

REQHold::REQHold(const REQHold& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void REQHold::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

REQHold::~REQHold() {
  SharedDtor();
}

void REQHold::SharedDtor() {
  if (this != default_instance_) {
  }
}

void REQHold::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* REQHold::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return REQHold_descriptor_;
}

const REQHold& REQHold::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wzqProtocol_2eproto();
  return *default_instance_;
}

REQHold* REQHold::default_instance_ = NULL;

REQHold* REQHold::New() const {
  return new REQHold;
}

void REQHold::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool REQHold::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void REQHold::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* REQHold::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int REQHold::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void REQHold::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const REQHold* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const REQHold*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void REQHold::MergeFrom(const REQHold& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void REQHold::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void REQHold::CopyFrom(const REQHold& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool REQHold::IsInitialized() const {

  return true;
}

void REQHold::Swap(REQHold* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata REQHold::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = REQHold_descriptor_;
  metadata.reflection = REQHold_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ACKHold::kResultIdFieldNumber;
#endif  // !_MSC_VER

ACKHold::ACKHold()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ACKHold::InitAsDefaultInstance() {
}

ACKHold::ACKHold(const ACKHold& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ACKHold::SharedCtor() {
  _cached_size_ = 0;
  result_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ACKHold::~ACKHold() {
  SharedDtor();
}

void ACKHold::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ACKHold::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ACKHold::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ACKHold_descriptor_;
}

const ACKHold& ACKHold::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wzqProtocol_2eproto();
  return *default_instance_;
}

ACKHold* ACKHold::default_instance_ = NULL;

ACKHold* ACKHold::New() const {
  return new ACKHold;
}

void ACKHold::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ACKHold::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_id_)));
          set_has_result_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ACKHold::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result_id = 1;
  if (has_result_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ACKHold::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result_id = 1;
  if (has_result_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ACKHold::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result_id = 1;
    if (has_result_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ACKHold::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ACKHold* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ACKHold*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ACKHold::MergeFrom(const ACKHold& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result_id()) {
      set_result_id(from.result_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ACKHold::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ACKHold::CopyFrom(const ACKHold& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ACKHold::IsInitialized() const {

  return true;
}

void ACKHold::Swap(ACKHold* other) {
  if (other != this) {
    std::swap(result_id_, other->result_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ACKHold::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ACKHold_descriptor_;
  metadata.reflection = ACKHold_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgPackage::kMsgIdFieldNumber;
const int MsgPackage::kSeqIdFieldNumber;
const int MsgPackage::kUserIdFieldNumber;
const int MsgPackage::kMsgFieldNumber;
const int MsgPackage::kSrcFieldNumber;
const int MsgPackage::kClientidFieldNumber;
#endif  // !_MSC_VER

MsgPackage::MsgPackage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgPackage::InitAsDefaultInstance() {
}

MsgPackage::MsgPackage(const MsgPackage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgPackage::SharedCtor() {
  _cached_size_ = 0;
  msg_id_ = GOOGLE_LONGLONG(0);
  seq_id_ = GOOGLE_LONGLONG(0);
  user_id_ = GOOGLE_LONGLONG(0);
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  src_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  clientid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPackage::~MsgPackage() {
  SharedDtor();
}

void MsgPackage::SharedDtor() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (src_ != &::google::protobuf::internal::kEmptyString) {
    delete src_;
  }
  if (this != default_instance_) {
  }
}

void MsgPackage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgPackage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPackage_descriptor_;
}

const MsgPackage& MsgPackage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wzqProtocol_2eproto();
  return *default_instance_;
}

MsgPackage* MsgPackage::default_instance_ = NULL;

MsgPackage* MsgPackage::New() const {
  return new MsgPackage;
}

void MsgPackage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msg_id_ = GOOGLE_LONGLONG(0);
    seq_id_ = GOOGLE_LONGLONG(0);
    user_id_ = GOOGLE_LONGLONG(0);
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::kEmptyString) {
        msg_->clear();
      }
    }
    if (has_src()) {
      if (src_ != &::google::protobuf::internal::kEmptyString) {
        src_->clear();
      }
    }
    clientid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPackage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 msg_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &msg_id_)));
          set_has_msg_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_seq_id;
        break;
      }

      // optional int64 seq_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seq_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &seq_id_)));
          set_has_seq_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_user_id;
        break;
      }

      // optional int64 user_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_msg;
        break;
      }

      // optional bytes msg = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_src;
        break;
      }

      // optional bytes src = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_src:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_src()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_clientid;
        break;
      }

      // optional int64 clientid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clientid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &clientid_)));
          set_has_clientid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgPackage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 msg_id = 1;
  if (has_msg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->msg_id(), output);
  }

  // optional int64 seq_id = 2;
  if (has_seq_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->seq_id(), output);
  }

  // optional int64 user_id = 3;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->user_id(), output);
  }

  // optional bytes msg = 4;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->msg(), output);
  }

  // optional bytes src = 5;
  if (has_src()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->src(), output);
  }

  // optional int64 clientid = 6;
  if (has_clientid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->clientid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgPackage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 msg_id = 1;
  if (has_msg_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->msg_id(), target);
  }

  // optional int64 seq_id = 2;
  if (has_seq_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->seq_id(), target);
  }

  // optional int64 user_id = 3;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->user_id(), target);
  }

  // optional bytes msg = 4;
  if (has_msg()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->msg(), target);
  }

  // optional bytes src = 5;
  if (has_src()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->src(), target);
  }

  // optional int64 clientid = 6;
  if (has_clientid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->clientid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgPackage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 msg_id = 1;
    if (has_msg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->msg_id());
    }

    // optional int64 seq_id = 2;
    if (has_seq_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->seq_id());
    }

    // optional int64 user_id = 3;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->user_id());
    }

    // optional bytes msg = 4;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->msg());
    }

    // optional bytes src = 5;
    if (has_src()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->src());
    }

    // optional int64 clientid = 6;
    if (has_clientid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->clientid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgPackage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPackage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPackage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPackage::MergeFrom(const MsgPackage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg_id()) {
      set_msg_id(from.msg_id());
    }
    if (from.has_seq_id()) {
      set_seq_id(from.seq_id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_msg()) {
      set_msg(from.msg());
    }
    if (from.has_src()) {
      set_src(from.src());
    }
    if (from.has_clientid()) {
      set_clientid(from.clientid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPackage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPackage::CopyFrom(const MsgPackage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPackage::IsInitialized() const {

  return true;
}

void MsgPackage::Swap(MsgPackage* other) {
  if (other != this) {
    std::swap(msg_id_, other->msg_id_);
    std::swap(seq_id_, other->seq_id_);
    std::swap(user_id_, other->user_id_);
    std::swap(msg_, other->msg_);
    std::swap(src_, other->src_);
    std::swap(clientid_, other->clientid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPackage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPackage_descriptor_;
  metadata.reflection = MsgPackage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserRawData::kUserIDFieldNumber;
const int UserRawData::kNameFieldNumber;
const int UserRawData::kAvatarFieldNumber;
const int UserRawData::kDisplayIDFieldNumber;
const int UserRawData::kScoreFieldNumber;
const int UserRawData::kHighestScoreFieldNumber;
const int UserRawData::kGameRecordFieldNumber;
#endif  // !_MSC_VER

UserRawData::UserRawData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserRawData::InitAsDefaultInstance() {
  gamerecord_ = const_cast< ::GameRecord*>(&::GameRecord::default_instance());
}

UserRawData::UserRawData(const UserRawData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserRawData::SharedCtor() {
  _cached_size_ = 0;
  userid_ = GOOGLE_LONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  avatar_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  displayid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  score_ = 0;
  highestscore_ = 0;
  gamerecord_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserRawData::~UserRawData() {
  SharedDtor();
}

void UserRawData::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (avatar_ != &::google::protobuf::internal::kEmptyString) {
    delete avatar_;
  }
  if (displayid_ != &::google::protobuf::internal::kEmptyString) {
    delete displayid_;
  }
  if (this != default_instance_) {
    delete gamerecord_;
  }
}

void UserRawData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserRawData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserRawData_descriptor_;
}

const UserRawData& UserRawData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wzqProtocol_2eproto();
  return *default_instance_;
}

UserRawData* UserRawData::default_instance_ = NULL;

UserRawData* UserRawData::New() const {
  return new UserRawData;
}

void UserRawData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = GOOGLE_LONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_avatar()) {
      if (avatar_ != &::google::protobuf::internal::kEmptyString) {
        avatar_->clear();
      }
    }
    if (has_displayid()) {
      if (displayid_ != &::google::protobuf::internal::kEmptyString) {
        displayid_->clear();
      }
    }
    score_ = 0;
    highestscore_ = 0;
    if (has_gamerecord()) {
      if (gamerecord_ != NULL) gamerecord_->::GameRecord::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserRawData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 userID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_avatar;
        break;
      }

      // optional string avatar = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_avatar:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_avatar()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->avatar().data(), this->avatar().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_displayID;
        break;
      }

      // optional string displayID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_displayID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_displayid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->displayid().data(), this->displayid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_score;
        break;
      }

      // optional int32 score = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_highestScore;
        break;
      }

      // optional int32 highestScore = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_highestScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &highestscore_)));
          set_has_highestscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_gameRecord;
        break;
      }

      // optional .GameRecord gameRecord = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gameRecord:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gamerecord()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserRawData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 userID = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->userid(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional string avatar = 3;
  if (has_avatar()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->avatar().data(), this->avatar().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->avatar(), output);
  }

  // optional string displayID = 4;
  if (has_displayid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->displayid().data(), this->displayid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->displayid(), output);
  }

  // optional int32 score = 5;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->score(), output);
  }

  // optional int32 highestScore = 6;
  if (has_highestscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->highestscore(), output);
  }

  // optional .GameRecord gameRecord = 7;
  if (has_gamerecord()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->gamerecord(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserRawData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 userID = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->userid(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional string avatar = 3;
  if (has_avatar()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->avatar().data(), this->avatar().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->avatar(), target);
  }

  // optional string displayID = 4;
  if (has_displayid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->displayid().data(), this->displayid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->displayid(), target);
  }

  // optional int32 score = 5;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->score(), target);
  }

  // optional int32 highestScore = 6;
  if (has_highestscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->highestscore(), target);
  }

  // optional .GameRecord gameRecord = 7;
  if (has_gamerecord()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->gamerecord(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserRawData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 userID = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->userid());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string avatar = 3;
    if (has_avatar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->avatar());
    }

    // optional string displayID = 4;
    if (has_displayid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->displayid());
    }

    // optional int32 score = 5;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }

    // optional int32 highestScore = 6;
    if (has_highestscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->highestscore());
    }

    // optional .GameRecord gameRecord = 7;
    if (has_gamerecord()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gamerecord());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserRawData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserRawData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserRawData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserRawData::MergeFrom(const UserRawData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_avatar()) {
      set_avatar(from.avatar());
    }
    if (from.has_displayid()) {
      set_displayid(from.displayid());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_highestscore()) {
      set_highestscore(from.highestscore());
    }
    if (from.has_gamerecord()) {
      mutable_gamerecord()->::GameRecord::MergeFrom(from.gamerecord());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserRawData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserRawData::CopyFrom(const UserRawData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserRawData::IsInitialized() const {

  return true;
}

void UserRawData::Swap(UserRawData* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(name_, other->name_);
    std::swap(avatar_, other->avatar_);
    std::swap(displayid_, other->displayid_);
    std::swap(score_, other->score_);
    std::swap(highestscore_, other->highestscore_);
    std::swap(gamerecord_, other->gamerecord_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserRawData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserRawData_descriptor_;
  metadata.reflection = UserRawData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameRecord::kTotalCountFieldNumber;
const int GameRecord::kWinCountFieldNumber;
#endif  // !_MSC_VER

GameRecord::GameRecord()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GameRecord::InitAsDefaultInstance() {
}

GameRecord::GameRecord(const GameRecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GameRecord::SharedCtor() {
  _cached_size_ = 0;
  totalcount_ = 0;
  wincount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameRecord::~GameRecord() {
  SharedDtor();
}

void GameRecord::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GameRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameRecord_descriptor_;
}

const GameRecord& GameRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wzqProtocol_2eproto();
  return *default_instance_;
}

GameRecord* GameRecord::default_instance_ = NULL;

GameRecord* GameRecord::New() const {
  return new GameRecord;
}

void GameRecord::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    totalcount_ = 0;
    wincount_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 totalCount = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalcount_)));
          set_has_totalcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_winCount;
        break;
      }

      // optional int32 winCount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_winCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wincount_)));
          set_has_wincount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GameRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 totalCount = 1;
  if (has_totalcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->totalcount(), output);
  }

  // optional int32 winCount = 2;
  if (has_wincount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->wincount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GameRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 totalCount = 1;
  if (has_totalcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->totalcount(), target);
  }

  // optional int32 winCount = 2;
  if (has_wincount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->wincount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GameRecord::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 totalCount = 1;
    if (has_totalcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totalcount());
    }

    // optional int32 winCount = 2;
    if (has_wincount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wincount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameRecord::MergeFrom(const GameRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_totalcount()) {
      set_totalcount(from.totalcount());
    }
    if (from.has_wincount()) {
      set_wincount(from.wincount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameRecord::CopyFrom(const GameRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameRecord::IsInitialized() const {

  return true;
}

void GameRecord::Swap(GameRecord* other) {
  if (other != this) {
    std::swap(totalcount_, other->totalcount_);
    std::swap(wincount_, other->wincount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameRecord_descriptor_;
  metadata.reflection = GameRecord_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int REQRegister::kAccountFieldNumber;
const int REQRegister::kPasswdFieldNumber;
#endif  // !_MSC_VER

REQRegister::REQRegister()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void REQRegister::InitAsDefaultInstance() {
}

REQRegister::REQRegister(const REQRegister& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void REQRegister::SharedCtor() {
  _cached_size_ = 0;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  passwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

REQRegister::~REQRegister() {
  SharedDtor();
}

void REQRegister::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (passwd_ != &::google::protobuf::internal::kEmptyString) {
    delete passwd_;
  }
  if (this != default_instance_) {
  }
}

void REQRegister::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* REQRegister::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return REQRegister_descriptor_;
}

const REQRegister& REQRegister::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wzqProtocol_2eproto();
  return *default_instance_;
}

REQRegister* REQRegister::default_instance_ = NULL;

REQRegister* REQRegister::New() const {
  return new REQRegister;
}

void REQRegister::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    if (has_passwd()) {
      if (passwd_ != &::google::protobuf::internal::kEmptyString) {
        passwd_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool REQRegister::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes account = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_account()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_passwd;
        break;
      }

      // optional bytes passwd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_passwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_passwd()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void REQRegister::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->account(), output);
  }

  // optional bytes passwd = 2;
  if (has_passwd()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->passwd(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* REQRegister::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes account = 1;
  if (has_account()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->account(), target);
  }

  // optional bytes passwd = 2;
  if (has_passwd()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->passwd(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int REQRegister::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes account = 1;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->account());
    }

    // optional bytes passwd = 2;
    if (has_passwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->passwd());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void REQRegister::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const REQRegister* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const REQRegister*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void REQRegister::MergeFrom(const REQRegister& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_passwd()) {
      set_passwd(from.passwd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void REQRegister::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void REQRegister::CopyFrom(const REQRegister& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool REQRegister::IsInitialized() const {

  return true;
}

void REQRegister::Swap(REQRegister* other) {
  if (other != this) {
    std::swap(account_, other->account_);
    std::swap(passwd_, other->passwd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata REQRegister::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = REQRegister_descriptor_;
  metadata.reflection = REQRegister_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ACKRegister::kCodeFieldNumber;
#endif  // !_MSC_VER

ACKRegister::ACKRegister()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ACKRegister::InitAsDefaultInstance() {
}

ACKRegister::ACKRegister(const ACKRegister& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ACKRegister::SharedCtor() {
  _cached_size_ = 0;
  code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ACKRegister::~ACKRegister() {
  SharedDtor();
}

void ACKRegister::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ACKRegister::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ACKRegister::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ACKRegister_descriptor_;
}

const ACKRegister& ACKRegister::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wzqProtocol_2eproto();
  return *default_instance_;
}

ACKRegister* ACKRegister::default_instance_ = NULL;

ACKRegister* ACKRegister::New() const {
  return new ACKRegister;
}

void ACKRegister::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ACKRegister::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ACKRegister::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ACKRegister::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 code = 1;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ACKRegister::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ACKRegister::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ACKRegister* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ACKRegister*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ACKRegister::MergeFrom(const ACKRegister& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ACKRegister::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ACKRegister::CopyFrom(const ACKRegister& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ACKRegister::IsInitialized() const {

  return true;
}

void ACKRegister::Swap(ACKRegister* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ACKRegister::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ACKRegister_descriptor_;
  metadata.reflection = ACKRegister_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int REQUserRegister::kUserNameFieldNumber;
const int REQUserRegister::kUserPasswordFieldNumber;
#endif  // !_MSC_VER

REQUserRegister::REQUserRegister()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void REQUserRegister::InitAsDefaultInstance() {
}

REQUserRegister::REQUserRegister(const REQUserRegister& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void REQUserRegister::SharedCtor() {
  _cached_size_ = 0;
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  userpassword_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

REQUserRegister::~REQUserRegister() {
  SharedDtor();
}

void REQUserRegister::SharedDtor() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (userpassword_ != &::google::protobuf::internal::kEmptyString) {
    delete userpassword_;
  }
  if (this != default_instance_) {
  }
}

void REQUserRegister::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* REQUserRegister::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return REQUserRegister_descriptor_;
}

const REQUserRegister& REQUserRegister::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wzqProtocol_2eproto();
  return *default_instance_;
}

REQUserRegister* REQUserRegister::default_instance_ = NULL;

REQUserRegister* REQUserRegister::New() const {
  return new REQUserRegister;
}

void REQUserRegister::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::kEmptyString) {
        username_->clear();
      }
    }
    if (has_userpassword()) {
      if (userpassword_ != &::google::protobuf::internal::kEmptyString) {
        userpassword_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool REQUserRegister::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes userName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_username()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_userPassword;
        break;
      }

      // required bytes userPassword = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userPassword:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_userpassword()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void REQUserRegister::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes userName = 1;
  if (has_username()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->username(), output);
  }

  // required bytes userPassword = 2;
  if (has_userpassword()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->userpassword(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* REQUserRegister::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes userName = 1;
  if (has_username()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->username(), target);
  }

  // required bytes userPassword = 2;
  if (has_userpassword()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->userpassword(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int REQUserRegister::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes userName = 1;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->username());
    }

    // required bytes userPassword = 2;
    if (has_userpassword()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->userpassword());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void REQUserRegister::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const REQUserRegister* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const REQUserRegister*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void REQUserRegister::MergeFrom(const REQUserRegister& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_userpassword()) {
      set_userpassword(from.userpassword());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void REQUserRegister::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void REQUserRegister::CopyFrom(const REQUserRegister& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool REQUserRegister::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void REQUserRegister::Swap(REQUserRegister* other) {
  if (other != this) {
    std::swap(username_, other->username_);
    std::swap(userpassword_, other->userpassword_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata REQUserRegister::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = REQUserRegister_descriptor_;
  metadata.reflection = REQUserRegister_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ACKUserRegister::kResultIdFieldNumber;
#endif  // !_MSC_VER

ACKUserRegister::ACKUserRegister()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ACKUserRegister::InitAsDefaultInstance() {
}

ACKUserRegister::ACKUserRegister(const ACKUserRegister& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ACKUserRegister::SharedCtor() {
  _cached_size_ = 0;
  result_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ACKUserRegister::~ACKUserRegister() {
  SharedDtor();
}

void ACKUserRegister::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ACKUserRegister::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ACKUserRegister::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ACKUserRegister_descriptor_;
}

const ACKUserRegister& ACKUserRegister::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wzqProtocol_2eproto();
  return *default_instance_;
}

ACKUserRegister* ACKUserRegister::default_instance_ = NULL;

ACKUserRegister* ACKUserRegister::New() const {
  return new ACKUserRegister;
}

void ACKUserRegister::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ACKUserRegister::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result_id = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_id_)));
          set_has_result_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ACKUserRegister::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result_id = 1 [default = 0];
  if (has_result_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ACKUserRegister::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result_id = 1 [default = 0];
  if (has_result_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ACKUserRegister::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result_id = 1 [default = 0];
    if (has_result_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ACKUserRegister::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ACKUserRegister* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ACKUserRegister*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ACKUserRegister::MergeFrom(const ACKUserRegister& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result_id()) {
      set_result_id(from.result_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ACKUserRegister::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ACKUserRegister::CopyFrom(const ACKUserRegister& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ACKUserRegister::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ACKUserRegister::Swap(ACKUserRegister* other) {
  if (other != this) {
    std::swap(result_id_, other->result_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ACKUserRegister::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ACKUserRegister_descriptor_;
  metadata.reflection = ACKUserRegister_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int REQUserPWDLogin::kUserNameFieldNumber;
const int REQUserPWDLogin::kUserPasswordFieldNumber;
#endif  // !_MSC_VER

REQUserPWDLogin::REQUserPWDLogin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void REQUserPWDLogin::InitAsDefaultInstance() {
}

REQUserPWDLogin::REQUserPWDLogin(const REQUserPWDLogin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void REQUserPWDLogin::SharedCtor() {
  _cached_size_ = 0;
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  userpassword_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

REQUserPWDLogin::~REQUserPWDLogin() {
  SharedDtor();
}

void REQUserPWDLogin::SharedDtor() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (userpassword_ != &::google::protobuf::internal::kEmptyString) {
    delete userpassword_;
  }
  if (this != default_instance_) {
  }
}

void REQUserPWDLogin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* REQUserPWDLogin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return REQUserPWDLogin_descriptor_;
}

const REQUserPWDLogin& REQUserPWDLogin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wzqProtocol_2eproto();
  return *default_instance_;
}

REQUserPWDLogin* REQUserPWDLogin::default_instance_ = NULL;

REQUserPWDLogin* REQUserPWDLogin::New() const {
  return new REQUserPWDLogin;
}

void REQUserPWDLogin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::kEmptyString) {
        username_->clear();
      }
    }
    if (has_userpassword()) {
      if (userpassword_ != &::google::protobuf::internal::kEmptyString) {
        userpassword_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool REQUserPWDLogin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes userName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_username()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_userPassword;
        break;
      }

      // required bytes userPassword = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userPassword:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_userpassword()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void REQUserPWDLogin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes userName = 1;
  if (has_username()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->username(), output);
  }

  // required bytes userPassword = 2;
  if (has_userpassword()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->userpassword(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* REQUserPWDLogin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes userName = 1;
  if (has_username()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->username(), target);
  }

  // required bytes userPassword = 2;
  if (has_userpassword()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->userpassword(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int REQUserPWDLogin::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes userName = 1;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->username());
    }

    // required bytes userPassword = 2;
    if (has_userpassword()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->userpassword());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void REQUserPWDLogin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const REQUserPWDLogin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const REQUserPWDLogin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void REQUserPWDLogin::MergeFrom(const REQUserPWDLogin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_userpassword()) {
      set_userpassword(from.userpassword());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void REQUserPWDLogin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void REQUserPWDLogin::CopyFrom(const REQUserPWDLogin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool REQUserPWDLogin::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void REQUserPWDLogin::Swap(REQUserPWDLogin* other) {
  if (other != this) {
    std::swap(username_, other->username_);
    std::swap(userpassword_, other->userpassword_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata REQUserPWDLogin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = REQUserPWDLogin_descriptor_;
  metadata.reflection = REQUserPWDLogin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ACKUserPWDLogin::kResultIdFieldNumber;
const int ACKUserPWDLogin::kTokenFieldNumber;
const int ACKUserPWDLogin::kBaseInfoFieldNumber;
#endif  // !_MSC_VER

ACKUserPWDLogin::ACKUserPWDLogin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ACKUserPWDLogin::InitAsDefaultInstance() {
  baseinfo_ = const_cast< ::UserRawData*>(&::UserRawData::default_instance());
}

ACKUserPWDLogin::ACKUserPWDLogin(const ACKUserPWDLogin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ACKUserPWDLogin::SharedCtor() {
  _cached_size_ = 0;
  result_id_ = 0;
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  baseinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ACKUserPWDLogin::~ACKUserPWDLogin() {
  SharedDtor();
}

void ACKUserPWDLogin::SharedDtor() {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (this != default_instance_) {
    delete baseinfo_;
  }
}

void ACKUserPWDLogin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ACKUserPWDLogin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ACKUserPWDLogin_descriptor_;
}

const ACKUserPWDLogin& ACKUserPWDLogin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wzqProtocol_2eproto();
  return *default_instance_;
}

ACKUserPWDLogin* ACKUserPWDLogin::default_instance_ = NULL;

ACKUserPWDLogin* ACKUserPWDLogin::New() const {
  return new ACKUserPWDLogin;
}

void ACKUserPWDLogin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_id_ = 0;
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::kEmptyString) {
        token_->clear();
      }
    }
    if (has_baseinfo()) {
      if (baseinfo_ != NULL) baseinfo_->::UserRawData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ACKUserPWDLogin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result_id = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_id_)));
          set_has_result_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_token;
        break;
      }

      // optional bytes token = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_token()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_baseInfo;
        break;
      }

      // optional .UserRawData baseInfo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_baseInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ACKUserPWDLogin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result_id = 1 [default = 0];
  if (has_result_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result_id(), output);
  }

  // optional bytes token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->token(), output);
  }

  // optional .UserRawData baseInfo = 3;
  if (has_baseinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->baseinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ACKUserPWDLogin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result_id = 1 [default = 0];
  if (has_result_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result_id(), target);
  }

  // optional bytes token = 2;
  if (has_token()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->token(), target);
  }

  // optional .UserRawData baseInfo = 3;
  if (has_baseinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->baseinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ACKUserPWDLogin::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result_id = 1 [default = 0];
    if (has_result_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result_id());
    }

    // optional bytes token = 2;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->token());
    }

    // optional .UserRawData baseInfo = 3;
    if (has_baseinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->baseinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ACKUserPWDLogin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ACKUserPWDLogin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ACKUserPWDLogin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ACKUserPWDLogin::MergeFrom(const ACKUserPWDLogin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result_id()) {
      set_result_id(from.result_id());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
    if (from.has_baseinfo()) {
      mutable_baseinfo()->::UserRawData::MergeFrom(from.baseinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ACKUserPWDLogin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ACKUserPWDLogin::CopyFrom(const ACKUserPWDLogin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ACKUserPWDLogin::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ACKUserPWDLogin::Swap(ACKUserPWDLogin* other) {
  if (other != this) {
    std::swap(result_id_, other->result_id_);
    std::swap(token_, other->token_);
    std::swap(baseinfo_, other->baseinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ACKUserPWDLogin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ACKUserPWDLogin_descriptor_;
  metadata.reflection = ACKUserPWDLogin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int REQUserTokenLogin::kTokenFieldNumber;
#endif  // !_MSC_VER

REQUserTokenLogin::REQUserTokenLogin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void REQUserTokenLogin::InitAsDefaultInstance() {
}

REQUserTokenLogin::REQUserTokenLogin(const REQUserTokenLogin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void REQUserTokenLogin::SharedCtor() {
  _cached_size_ = 0;
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

REQUserTokenLogin::~REQUserTokenLogin() {
  SharedDtor();
}

void REQUserTokenLogin::SharedDtor() {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (this != default_instance_) {
  }
}

void REQUserTokenLogin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* REQUserTokenLogin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return REQUserTokenLogin_descriptor_;
}

const REQUserTokenLogin& REQUserTokenLogin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wzqProtocol_2eproto();
  return *default_instance_;
}

REQUserTokenLogin* REQUserTokenLogin::default_instance_ = NULL;

REQUserTokenLogin* REQUserTokenLogin::New() const {
  return new REQUserTokenLogin;
}

void REQUserTokenLogin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::kEmptyString) {
        token_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool REQUserTokenLogin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes token = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_token()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void REQUserTokenLogin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes token = 1;
  if (has_token()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->token(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* REQUserTokenLogin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes token = 1;
  if (has_token()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->token(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int REQUserTokenLogin::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes token = 1;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->token());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void REQUserTokenLogin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const REQUserTokenLogin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const REQUserTokenLogin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void REQUserTokenLogin::MergeFrom(const REQUserTokenLogin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_token()) {
      set_token(from.token());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void REQUserTokenLogin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void REQUserTokenLogin::CopyFrom(const REQUserTokenLogin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool REQUserTokenLogin::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void REQUserTokenLogin::Swap(REQUserTokenLogin* other) {
  if (other != this) {
    std::swap(token_, other->token_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata REQUserTokenLogin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = REQUserTokenLogin_descriptor_;
  metadata.reflection = REQUserTokenLogin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ACKUserTokenLogin::kResultCodeFieldNumber;
const int ACKUserTokenLogin::kBaseInfoFieldNumber;
#endif  // !_MSC_VER

ACKUserTokenLogin::ACKUserTokenLogin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ACKUserTokenLogin::InitAsDefaultInstance() {
  baseinfo_ = const_cast< ::UserRawData*>(&::UserRawData::default_instance());
}

ACKUserTokenLogin::ACKUserTokenLogin(const ACKUserTokenLogin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ACKUserTokenLogin::SharedCtor() {
  _cached_size_ = 0;
  resultcode_ = 0;
  baseinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ACKUserTokenLogin::~ACKUserTokenLogin() {
  SharedDtor();
}

void ACKUserTokenLogin::SharedDtor() {
  if (this != default_instance_) {
    delete baseinfo_;
  }
}

void ACKUserTokenLogin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ACKUserTokenLogin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ACKUserTokenLogin_descriptor_;
}

const ACKUserTokenLogin& ACKUserTokenLogin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wzqProtocol_2eproto();
  return *default_instance_;
}

ACKUserTokenLogin* ACKUserTokenLogin::default_instance_ = NULL;

ACKUserTokenLogin* ACKUserTokenLogin::New() const {
  return new ACKUserTokenLogin;
}

void ACKUserTokenLogin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    resultcode_ = 0;
    if (has_baseinfo()) {
      if (baseinfo_ != NULL) baseinfo_->::UserRawData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ACKUserTokenLogin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 resultCode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &resultcode_)));
          set_has_resultcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_baseInfo;
        break;
      }

      // optional .UserRawData baseInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_baseInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ACKUserTokenLogin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 resultCode = 1;
  if (has_resultcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->resultcode(), output);
  }

  // optional .UserRawData baseInfo = 2;
  if (has_baseinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->baseinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ACKUserTokenLogin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 resultCode = 1;
  if (has_resultcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->resultcode(), target);
  }

  // optional .UserRawData baseInfo = 2;
  if (has_baseinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->baseinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ACKUserTokenLogin::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 resultCode = 1;
    if (has_resultcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->resultcode());
    }

    // optional .UserRawData baseInfo = 2;
    if (has_baseinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->baseinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ACKUserTokenLogin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ACKUserTokenLogin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ACKUserTokenLogin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ACKUserTokenLogin::MergeFrom(const ACKUserTokenLogin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_resultcode()) {
      set_resultcode(from.resultcode());
    }
    if (from.has_baseinfo()) {
      mutable_baseinfo()->::UserRawData::MergeFrom(from.baseinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ACKUserTokenLogin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ACKUserTokenLogin::CopyFrom(const ACKUserTokenLogin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ACKUserTokenLogin::IsInitialized() const {

  return true;
}

void ACKUserTokenLogin::Swap(ACKUserTokenLogin* other) {
  if (other != this) {
    std::swap(resultcode_, other->resultcode_);
    std::swap(baseinfo_, other->baseinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ACKUserTokenLogin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ACKUserTokenLogin_descriptor_;
  metadata.reflection = ACKUserTokenLogin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int REQSendVerifyCode::kPhoneNumberFieldNumber;
#endif  // !_MSC_VER

REQSendVerifyCode::REQSendVerifyCode()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void REQSendVerifyCode::InitAsDefaultInstance() {
}

REQSendVerifyCode::REQSendVerifyCode(const REQSendVerifyCode& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void REQSendVerifyCode::SharedCtor() {
  _cached_size_ = 0;
  phonenumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

REQSendVerifyCode::~REQSendVerifyCode() {
  SharedDtor();
}

void REQSendVerifyCode::SharedDtor() {
  if (phonenumber_ != &::google::protobuf::internal::kEmptyString) {
    delete phonenumber_;
  }
  if (this != default_instance_) {
  }
}

void REQSendVerifyCode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* REQSendVerifyCode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return REQSendVerifyCode_descriptor_;
}

const REQSendVerifyCode& REQSendVerifyCode::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wzqProtocol_2eproto();
  return *default_instance_;
}

REQSendVerifyCode* REQSendVerifyCode::default_instance_ = NULL;

REQSendVerifyCode* REQSendVerifyCode::New() const {
  return new REQSendVerifyCode;
}

void REQSendVerifyCode::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_phonenumber()) {
      if (phonenumber_ != &::google::protobuf::internal::kEmptyString) {
        phonenumber_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool REQSendVerifyCode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes phoneNumber = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_phonenumber()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void REQSendVerifyCode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes phoneNumber = 1;
  if (has_phonenumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->phonenumber(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* REQSendVerifyCode::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes phoneNumber = 1;
  if (has_phonenumber()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->phonenumber(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int REQSendVerifyCode::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes phoneNumber = 1;
    if (has_phonenumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->phonenumber());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void REQSendVerifyCode::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const REQSendVerifyCode* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const REQSendVerifyCode*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void REQSendVerifyCode::MergeFrom(const REQSendVerifyCode& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_phonenumber()) {
      set_phonenumber(from.phonenumber());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void REQSendVerifyCode::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void REQSendVerifyCode::CopyFrom(const REQSendVerifyCode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool REQSendVerifyCode::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void REQSendVerifyCode::Swap(REQSendVerifyCode* other) {
  if (other != this) {
    std::swap(phonenumber_, other->phonenumber_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata REQSendVerifyCode::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = REQSendVerifyCode_descriptor_;
  metadata.reflection = REQSendVerifyCode_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ACKSendVerifyCode::kResultCodeFieldNumber;
#endif  // !_MSC_VER

ACKSendVerifyCode::ACKSendVerifyCode()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ACKSendVerifyCode::InitAsDefaultInstance() {
}

ACKSendVerifyCode::ACKSendVerifyCode(const ACKSendVerifyCode& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ACKSendVerifyCode::SharedCtor() {
  _cached_size_ = 0;
  resultcode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ACKSendVerifyCode::~ACKSendVerifyCode() {
  SharedDtor();
}

void ACKSendVerifyCode::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ACKSendVerifyCode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ACKSendVerifyCode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ACKSendVerifyCode_descriptor_;
}

const ACKSendVerifyCode& ACKSendVerifyCode::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wzqProtocol_2eproto();
  return *default_instance_;
}

ACKSendVerifyCode* ACKSendVerifyCode::default_instance_ = NULL;

ACKSendVerifyCode* ACKSendVerifyCode::New() const {
  return new ACKSendVerifyCode;
}

void ACKSendVerifyCode::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    resultcode_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ACKSendVerifyCode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 resultCode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &resultcode_)));
          set_has_resultcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ACKSendVerifyCode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 resultCode = 1;
  if (has_resultcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->resultcode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ACKSendVerifyCode::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 resultCode = 1;
  if (has_resultcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->resultcode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ACKSendVerifyCode::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 resultCode = 1;
    if (has_resultcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->resultcode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ACKSendVerifyCode::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ACKSendVerifyCode* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ACKSendVerifyCode*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ACKSendVerifyCode::MergeFrom(const ACKSendVerifyCode& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_resultcode()) {
      set_resultcode(from.resultcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ACKSendVerifyCode::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ACKSendVerifyCode::CopyFrom(const ACKSendVerifyCode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ACKSendVerifyCode::IsInitialized() const {

  return true;
}

void ACKSendVerifyCode::Swap(ACKSendVerifyCode* other) {
  if (other != this) {
    std::swap(resultcode_, other->resultcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ACKSendVerifyCode::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ACKSendVerifyCode_descriptor_;
  metadata.reflection = ACKSendVerifyCode_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int REQPhoneNumberLogin::kPhoneNumberFieldNumber;
const int REQPhoneNumberLogin::kVerifyCodeFieldNumber;
#endif  // !_MSC_VER

REQPhoneNumberLogin::REQPhoneNumberLogin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void REQPhoneNumberLogin::InitAsDefaultInstance() {
}

REQPhoneNumberLogin::REQPhoneNumberLogin(const REQPhoneNumberLogin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void REQPhoneNumberLogin::SharedCtor() {
  _cached_size_ = 0;
  phonenumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  verifycode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

REQPhoneNumberLogin::~REQPhoneNumberLogin() {
  SharedDtor();
}

void REQPhoneNumberLogin::SharedDtor() {
  if (phonenumber_ != &::google::protobuf::internal::kEmptyString) {
    delete phonenumber_;
  }
  if (verifycode_ != &::google::protobuf::internal::kEmptyString) {
    delete verifycode_;
  }
  if (this != default_instance_) {
  }
}

void REQPhoneNumberLogin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* REQPhoneNumberLogin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return REQPhoneNumberLogin_descriptor_;
}

const REQPhoneNumberLogin& REQPhoneNumberLogin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wzqProtocol_2eproto();
  return *default_instance_;
}

REQPhoneNumberLogin* REQPhoneNumberLogin::default_instance_ = NULL;

REQPhoneNumberLogin* REQPhoneNumberLogin::New() const {
  return new REQPhoneNumberLogin;
}

void REQPhoneNumberLogin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_phonenumber()) {
      if (phonenumber_ != &::google::protobuf::internal::kEmptyString) {
        phonenumber_->clear();
      }
    }
    if (has_verifycode()) {
      if (verifycode_ != &::google::protobuf::internal::kEmptyString) {
        verifycode_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool REQPhoneNumberLogin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes phoneNumber = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_phonenumber()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_verifyCode;
        break;
      }

      // required bytes verifyCode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_verifyCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_verifycode()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void REQPhoneNumberLogin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes phoneNumber = 1;
  if (has_phonenumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->phonenumber(), output);
  }

  // required bytes verifyCode = 2;
  if (has_verifycode()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->verifycode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* REQPhoneNumberLogin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes phoneNumber = 1;
  if (has_phonenumber()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->phonenumber(), target);
  }

  // required bytes verifyCode = 2;
  if (has_verifycode()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->verifycode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int REQPhoneNumberLogin::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes phoneNumber = 1;
    if (has_phonenumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->phonenumber());
    }

    // required bytes verifyCode = 2;
    if (has_verifycode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->verifycode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void REQPhoneNumberLogin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const REQPhoneNumberLogin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const REQPhoneNumberLogin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void REQPhoneNumberLogin::MergeFrom(const REQPhoneNumberLogin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_phonenumber()) {
      set_phonenumber(from.phonenumber());
    }
    if (from.has_verifycode()) {
      set_verifycode(from.verifycode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void REQPhoneNumberLogin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void REQPhoneNumberLogin::CopyFrom(const REQPhoneNumberLogin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool REQPhoneNumberLogin::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void REQPhoneNumberLogin::Swap(REQPhoneNumberLogin* other) {
  if (other != this) {
    std::swap(phonenumber_, other->phonenumber_);
    std::swap(verifycode_, other->verifycode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata REQPhoneNumberLogin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = REQPhoneNumberLogin_descriptor_;
  metadata.reflection = REQPhoneNumberLogin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ACKPhoneNumberLogin::kResultCodeFieldNumber;
const int ACKPhoneNumberLogin::kTokenFieldNumber;
const int ACKPhoneNumberLogin::kBaseInfoFieldNumber;
#endif  // !_MSC_VER

ACKPhoneNumberLogin::ACKPhoneNumberLogin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ACKPhoneNumberLogin::InitAsDefaultInstance() {
  baseinfo_ = const_cast< ::UserRawData*>(&::UserRawData::default_instance());
}

ACKPhoneNumberLogin::ACKPhoneNumberLogin(const ACKPhoneNumberLogin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ACKPhoneNumberLogin::SharedCtor() {
  _cached_size_ = 0;
  resultcode_ = 0;
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  baseinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ACKPhoneNumberLogin::~ACKPhoneNumberLogin() {
  SharedDtor();
}

void ACKPhoneNumberLogin::SharedDtor() {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (this != default_instance_) {
    delete baseinfo_;
  }
}

void ACKPhoneNumberLogin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ACKPhoneNumberLogin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ACKPhoneNumberLogin_descriptor_;
}

const ACKPhoneNumberLogin& ACKPhoneNumberLogin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wzqProtocol_2eproto();
  return *default_instance_;
}

ACKPhoneNumberLogin* ACKPhoneNumberLogin::default_instance_ = NULL;

ACKPhoneNumberLogin* ACKPhoneNumberLogin::New() const {
  return new ACKPhoneNumberLogin;
}

void ACKPhoneNumberLogin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    resultcode_ = 0;
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::kEmptyString) {
        token_->clear();
      }
    }
    if (has_baseinfo()) {
      if (baseinfo_ != NULL) baseinfo_->::UserRawData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ACKPhoneNumberLogin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 resultCode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &resultcode_)));
          set_has_resultcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_token;
        break;
      }

      // optional bytes token = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_token()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_baseInfo;
        break;
      }

      // optional .UserRawData baseInfo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_baseInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ACKPhoneNumberLogin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 resultCode = 1;
  if (has_resultcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->resultcode(), output);
  }

  // optional bytes token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->token(), output);
  }

  // optional .UserRawData baseInfo = 3;
  if (has_baseinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->baseinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ACKPhoneNumberLogin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 resultCode = 1;
  if (has_resultcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->resultcode(), target);
  }

  // optional bytes token = 2;
  if (has_token()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->token(), target);
  }

  // optional .UserRawData baseInfo = 3;
  if (has_baseinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->baseinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ACKPhoneNumberLogin::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 resultCode = 1;
    if (has_resultcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->resultcode());
    }

    // optional bytes token = 2;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->token());
    }

    // optional .UserRawData baseInfo = 3;
    if (has_baseinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->baseinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ACKPhoneNumberLogin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ACKPhoneNumberLogin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ACKPhoneNumberLogin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ACKPhoneNumberLogin::MergeFrom(const ACKPhoneNumberLogin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_resultcode()) {
      set_resultcode(from.resultcode());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
    if (from.has_baseinfo()) {
      mutable_baseinfo()->::UserRawData::MergeFrom(from.baseinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ACKPhoneNumberLogin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ACKPhoneNumberLogin::CopyFrom(const ACKPhoneNumberLogin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ACKPhoneNumberLogin::IsInitialized() const {

  return true;
}

void ACKPhoneNumberLogin::Swap(ACKPhoneNumberLogin* other) {
  if (other != this) {
    std::swap(resultcode_, other->resultcode_);
    std::swap(token_, other->token_);
    std::swap(baseinfo_, other->baseinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ACKPhoneNumberLogin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ACKPhoneNumberLogin_descriptor_;
  metadata.reflection = ACKPhoneNumberLogin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int REQChangeName::kNameFieldNumber;
#endif  // !_MSC_VER

REQChangeName::REQChangeName()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void REQChangeName::InitAsDefaultInstance() {
}

REQChangeName::REQChangeName(const REQChangeName& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void REQChangeName::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

REQChangeName::~REQChangeName() {
  SharedDtor();
}

void REQChangeName::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void REQChangeName::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* REQChangeName::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return REQChangeName_descriptor_;
}

const REQChangeName& REQChangeName::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wzqProtocol_2eproto();
  return *default_instance_;
}

REQChangeName* REQChangeName::default_instance_ = NULL;

REQChangeName* REQChangeName::New() const {
  return new REQChangeName;
}

void REQChangeName::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool REQChangeName::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void REQChangeName::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* REQChangeName::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int REQChangeName::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void REQChangeName::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const REQChangeName* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const REQChangeName*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void REQChangeName::MergeFrom(const REQChangeName& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void REQChangeName::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void REQChangeName::CopyFrom(const REQChangeName& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool REQChangeName::IsInitialized() const {

  return true;
}

void REQChangeName::Swap(REQChangeName* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata REQChangeName::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = REQChangeName_descriptor_;
  metadata.reflection = REQChangeName_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ACKChangeName::kResultCodeFieldNumber;
#endif  // !_MSC_VER

ACKChangeName::ACKChangeName()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ACKChangeName::InitAsDefaultInstance() {
}

ACKChangeName::ACKChangeName(const ACKChangeName& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ACKChangeName::SharedCtor() {
  _cached_size_ = 0;
  resultcode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ACKChangeName::~ACKChangeName() {
  SharedDtor();
}

void ACKChangeName::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ACKChangeName::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ACKChangeName::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ACKChangeName_descriptor_;
}

const ACKChangeName& ACKChangeName::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wzqProtocol_2eproto();
  return *default_instance_;
}

ACKChangeName* ACKChangeName::default_instance_ = NULL;

ACKChangeName* ACKChangeName::New() const {
  return new ACKChangeName;
}

void ACKChangeName::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    resultcode_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ACKChangeName::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 resultCode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &resultcode_)));
          set_has_resultcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ACKChangeName::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 resultCode = 1;
  if (has_resultcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->resultcode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ACKChangeName::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 resultCode = 1;
  if (has_resultcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->resultcode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ACKChangeName::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 resultCode = 1;
    if (has_resultcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->resultcode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ACKChangeName::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ACKChangeName* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ACKChangeName*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ACKChangeName::MergeFrom(const ACKChangeName& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_resultcode()) {
      set_resultcode(from.resultcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ACKChangeName::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ACKChangeName::CopyFrom(const ACKChangeName& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ACKChangeName::IsInitialized() const {

  return true;
}

void ACKChangeName::Swap(ACKChangeName* other) {
  if (other != this) {
    std::swap(resultcode_, other->resultcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ACKChangeName::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ACKChangeName_descriptor_;
  metadata.reflection = ACKChangeName_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
